using MotoSystem.Data;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.UI;
using System.Web.UI.WebControls;
using Temple.data;
using LitJson;
using System.Data.SqlTypes;
using System.Security.Policy;
using Read.data;
using System.EnterpriseServices;
using System.Reflection;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using twbobibobi;
using static ZXing.QrCode.Internal.Mode;

namespace Temple.FET.APITEST
{
    public class Applicant
    {
        public static int ApplicantID_Lights_da = 0;
        public static int ApplicantID_Lights_h = 0;
        public static int ApplicantID_Lights_wu = 0;
        public static int ApplicantID_Lights_Fu = 0;
        public static int ApplicantID_Lights_Luer = 0;
        public static int ApplicantID_Lights_ty = 0;
        public static int ApplicantID_Lights_Fw = 0;
        public static int ApplicantID_Lights_dh = 0;
        public static int ApplicantID_Lights_Lk = 0;
        public static int ApplicantID_Lights_ma = 0;
        
        public static int ApplicantID_Purdue_da = 0;
        public static int ApplicantID_Purdue_h = 0;
        public static int ApplicantID_Purdue_wu = 0;
        public static int ApplicantID_Purdue_Fu = 0;
        public static int ApplicantID_Purdue_Luer = 0;
        public static int ApplicantID_Purdue_ty = 0;
        public static int ApplicantID_Purdue_Fw = 0;
        public static int ApplicantID_Purdue_dh = 0;
        public static int ApplicantID_Purdue_Lk = 0;
        public static int ApplicantID_Purdue_ma = 0;

        public static void Set(int adminID, int kind, int value)
        {
            switch (kind)
            {
                case 1:
                    switch (adminID)
                    {
                        case 3:
                            ApplicantID_Lights_da = value;
                            break;
                        case 4:
                            ApplicantID_Lights_h = value;
                            break;
                        case 6:
                            ApplicantID_Lights_wu = value;
                            break;
                        case 8:
                            ApplicantID_Lights_Fu = value;
                            break;
                        case 10:
                            ApplicantID_Lights_Luer = value;
                            break;
                        case 14:
                            ApplicantID_Lights_ty = value;
                            break;
                        case 15:
                            ApplicantID_Lights_Fw = value;
                            break;
                        case 16:
                            ApplicantID_Lights_dh = value;
                            break;
                        case 21:
                            ApplicantID_Lights_Lk = value;
                            break;
                        case 23:
                            ApplicantID_Lights_ma = value;
                            break;
                    }
                    break;
                case 2:
                    switch (adminID)
                    {
                        case 3:
                            ApplicantID_Purdue_da = value;
                            break;
                        case 4:
                            ApplicantID_Purdue_h = value;
                            break;
                        case 6:
                            ApplicantID_Purdue_wu = value;
                            break;
                        case 8:
                            ApplicantID_Purdue_Fu = value;
                            break;
                        case 10:
                            ApplicantID_Purdue_Luer = value;
                            break;
                        case 14:
                            ApplicantID_Purdue_ty = value;
                            break;
                        case 15:
                            ApplicantID_Purdue_Fw = value;
                            break;
                        case 16:
                            ApplicantID_Purdue_dh = value;
                            break;
                        case 21:
                            ApplicantID_Purdue_Lk = value;
                            break;
                        case 23:
                            ApplicantID_Purdue_ma = value;
                            break;
                    }
                    break;
                case 3:
                    break;
                case 4:
                    break;
                case 5:
                    break;
                case 6:
                    break;
                case 7:
                    break;
                case 8:
                    break;
                case 9:
                    break;
                case 10:
                    break;
                case 11:
                    break;
                case 12:
                    break;
            }
        }
    }

    public partial class CreateOrder : AjaxBasePage
    {
        public string checkedkey;
        protected void Page_Load(object sender, EventArgs e)
        {
            var sr = new StreamReader(Request.InputStream);//读取流
            string URL = Request.Url.Authority;

            var stream = sr.ReadToEnd();//读取所有数据

            string FETVALUE = mJSonHelper.GetStringFromJson("FETVALUE", stream);
            string channel = mJSonHelper.GetStringFromJson("channel", stream);
            string transmitTime = mJSonHelper.GetStringFromJson("transmitTime", stream);
            string clientOrderNumber = mJSonHelper.GetStringFromJson("clientOrderNumber", stream);
            string encryptText = mJSonHelper.GetStringFromJson("paramContent", stream);
            string encryptText2 = string.Empty;

            //channel = "FETnet";
            //clientOrderNumber = "CMPO20231206000335";
            //FETVALUE = "9834f17bdeff4ad8d84c18d89c669017dd5a1b97797f82a90e948284a6ac1c7b";

            string key = "g%Qx7h_eOg";
            Session["DEV"] = "PROD";
            if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0 || URL.IndexOf("localhost:1") >= 0)
            {
                Session["DEV"] = "UAT";
                key = "koB#pPv2%t";
            }

            string F = mJSonHelper.Sha256(channel + key + clientOrderNumber);

            int ApplicantID = 0;
            int PurdueID = 0;
            int LightsID = 0;
            int ProductID = 0;
            int SuppliesID = 0;
            int BPOID = 0;
            int LingbaolidouID = 0;
            int TaoistJiaoCeremonyID = 0;
            string OrderID = "0";
            string Year = "2024";
            int AdminID = 0;
            int service = 0;

            string[] Lightslist = new string[0];
            string[] Purduelist = new string[0];
            string[] Supplieslist = new string[0];
            string[] BPOlist = new string[0];
            string[] Lingbaolidoulist = new string[0];
            string[] TaoistJiaoCeremonylist = new string[0];
            string[] Productlist = new string[0];

            int[] ApplicantID_Array = new int[0];
            int[] LightsID_Array = new int[0];
            int[] PurdueID_Array = new int[0];
            int[] ProductID_Array = new int[0];
            string[] OrderID_Array = new string[0];

            var tempList_aid = ApplicantID_Array.ToList();
            var tempList_lid = LightsID_Array.ToList();
            var tempList_pid = ProductID_Array.ToList();
            var tempList_puid = PurdueID_Array.ToList();
            var tempList_oid = OrderID_Array.ToList();

            //encryptText2 = "gqagr5d52I0U3PXSL//yfTpisydIZCK9uNZUTn6NvlhZ3CjtqsuUpoEBbK26E1PYQlvZNnjuAn9jnc2eSdB/IS3AOGz1YPEvppZODnb8PTxMQgK9Ocv2972sLp+E/miogux97QthWfyASVXojxTjDqNkG8dF2dcYrgWIuaGSXhpm6zxsl7WsLG1juynKr+h8PMRW7xk6EiGXS8InQrBf11RSG5hSdn10t+uppKt2riq/zgVkgpBNpUlo76R9LpQtxiqDTbCRBo3Wm/jpZpPhoyMlCRDZpW30FFRq/FLq/3RdJr6WmX5QGuVE51q1Ycg7WOgVdYj54TrKWM3iFUwZyi/B0w2q1c72fXzToo8C5K4=";
            encryptText2 = "JmhrLkoT84IYui57rm3IAe3EBoF/g8RVgNL6HnEPGfLBWiPzApUmwINnMV6zZM13NyRVN0cq3TitexpJEVvu5/ur2qM0SR9yoARK6lXAKoj+zhB2WeYkqqzhVWB4pBbHmfClcVXrXQVS+qOwqsv9myrNrpZ790xB3YgYKaRgYmOkLtAAubCvOncSb9BUy0qsxMlp2FZQfgr51jzgLRZC96PDWbUswUqDWyAO5bsZcl/ZcLNuNPDrYemKNKQ1ICrM3gOLvMGJZu5UqP6Soj5g3AkUCOcKOOAj4RnignjMe9KY1ur0QLTAy/jQ/ZW6v2b1QUFVKns8FsuLSK7m54YFoZDh2Xz+Yrg1OraEFtc6PGoe1WAGGCX9pzV7eaRQB6hTfFQYCSb7waXVJZHmPClHKs3lxS7LIApasWsL0h0F4N7uKdb6flkw5ar1smtCtSvmqfjnl5TBUNV1myQu74yhwA==";

            checkedkey = "shh#upsu6lyoeBkx";

            if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0 || URL.IndexOf("localhost:1") >= 0)
            {
                checkedkey = "lvrd5bidxr^dqlwX";
            }

            //checkedkey = "ukjmi3jipjknkI+t";
            string text = "{\"totalAmount\":300,\"applicant\":{\"name\":\"曹珈維\",\"mobile\":\"0926224332\",\"receipt\":\"曹珈維\",\"zipCode\":\"114\",\"city\":\"臺北市\",\"region\":\"內湖區\",\"address\":\"瑞光路\",\"send\":\"Y\"},\"items\":[   {     \"productCode\": \"appssp00018\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 35,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00019\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 36,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00020\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00021\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00022\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   } ]}";text = "{\"totalAmount\":300,\"applicant\":{\"name\":\"曹珈維\",\"mobile\":\"0926224332\",\"receipt\":\"曹珈維\",\"zipCode\":\"114\",\"city\":\"臺北市\",\"region\":\"內湖區\",\"address\":\"瑞光路\",\"send\":\"Y\"},\"items\":[   {     \"productCode\": \"appssp00018\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 35,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00019\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 36,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00020\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00021\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00022\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   } ]}";
            text = "{\"totalAmount\":300,\"applicant\":{\"name\":\"曹珈維\",\"mobile\":\"0926224332\",\"receipt\":\"曹珈維\",\"zipCode\":\"114\",\"city\":\"臺北市\",\"region\":\"內湖區\",\"address\":\"瑞光路\",\"send\":\"Y\"},\"items\":[   {     \"productCode\": \"appssp00024\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 35,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00025\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 36,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   },   {     \"productCode\": \"appssp00026\",     \"qty\": 1,     \"unitPrice\": 500,     \"prayedPerson\": [       {         \"prayedPersonSeq\": 37,         \"name\": \"AA\",         \"gender\": \"M\",         \"birthday\": \"1100101\",         \"lunarBirthday\": \"1091118\",         \"leapMonth\": \"N\",         \"oversea\": \"1\",         \"zipCode\": \"407\",         \"city\": \"臺中市\",         \"region\": \"西屯區\",         \"address\": \"台灣大道四段925號四樓之2\"       }     ]   } ]}";

            string decrypt = string.Empty;
            string decrypt2 = string.Empty;
            string encrypt = string.Empty;

            SaveRequestLog(Request.Url + stream);

            try
            {
                decrypt = AESHelper.AesDecrypt(encryptText, checkedkey);
                //decrypt2 = AESHelper.AesDecrypt(encryptText2, checkedkey);

                encrypt = AESHelper.AesEncrypt(text, checkedkey);

                if (F != FETVALUE && decrypt != "")
                {
                    JSONErrorOrder(checkedkey, decrypt, "1003", "9999", "解密失敗!");
                }
                else
                {
                    LightDAC objLightDAC = new LightDAC(this);
                    JObject obj = JsonConvert.DeserializeObject<JObject>(decrypt);

                    JObject applicantInfo = (JObject)obj["applicant"];
                    JArray itemsInfo = (JArray)obj["items"];
                    string total = obj["totalAmount"].ToString();
                    string fetOrderNumber = obj["fetOrderNumber"] != null ? obj["fetOrderNumber"].ToString() : "";                          //遠傳訂單編號

                    string appName = applicantInfo["name"].ToString();                                                                      //購買人姓名
                    string appMobile = applicantInfo["mobile"].ToString();                                                                  //購買人電話
                    string appemail = applicantInfo["email"] != null ? applicantInfo["email"].ToString() : "";                              //購買人 email
                    string appBirth = applicantInfo["birthday"] != null ? applicantInfo["birthday"].ToString() : "";                        //購買人國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                    string applunarBirthday = applicantInfo["lunarBirthday"] != null ? applicantInfo["lunarBirthday"].ToString() : "";      //購買人農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                    string appleapMonth = applicantInfo["lunarLeap"] != null ? applicantInfo["lunarLeap"].ToString() : "";                  //是否為閏月 Y: 是 N: 否
                    string applunarBirthTime = applicantInfo["lunarBirthTime"] != null ? applicantInfo["lunarBirthTime"].ToString() : "";   //農曆時辰 未確認時辰用戶可選吉時
                    string appremark = applicantInfo["remark"] != null ? applicantInfo["remark"].ToString() : "";                           //備註
                    string reName = applicantInfo["receipt"] != null ? applicantInfo["receipt"].ToString() : "";                            //收件人姓名
                    string reMobile = applicantInfo["receiptMobile"] != null ? applicantInfo["receiptMobile"].ToString() : "";              //收件人電話
                    string appCity = applicantInfo["city"] != null ? applicantInfo["city"].ToString() : "";                                 //縣/市
                    string appRegion = applicantInfo["region"] != null ? applicantInfo["region"].ToString() : "";                           //地區
                    string appAddr = applicantInfo["address"] != null ? applicantInfo["address"].ToString() : "";                           //部分地址
                    string appzipCode = applicantInfo["zipCode"] != null ? applicantInfo["zipCode"].ToString() : "0";                       //郵遞區號
                    string sendback = applicantInfo["send"] != null ? applicantInfo["send"].ToString() : "0";                               //是否寄送通知單及祈福品(開運商品固定 defult: Y) Y-是 N-否
                    string sendRemark = applicantInfo["sendRemark"] != null ? applicantInfo["sendRemark"].ToString() : "";                  //寄送註記：奉食/自用… 當 send = Y 時，本欄位註記寄送模式
                    string shippingFee = applicantInfo["shippingFee"] != null ? applicantInfo["shippingFee"].ToString() : "";               //運費
                    string productCode = itemsInfo[0]["productCode"].ToString();                                                            //產品編號(業者提供)

                    TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
                    DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {

                        int.TryParse(dtTempleCodeInfo.Rows[0]["AdminID"].ToString(), out AdminID);
                        int.TryParse(dtTempleCodeInfo.Rows[0]["ServiceID"].ToString(), out service);

                        //服務名稱: 1-點燈 2-普度 3-商品文創小販部 4-下元補庫 5-呈疏補庫(天官武財神聖誕補財庫) 6-企業補財庫 7-天赦日招財補運 8-天赦日祭改 9-關聖帝君聖誕 10-代燒金紙 11-天貺納福添運法會 12-靈寶禮斗
                        //          13-七朝清醮 14- 15- 16-補財庫 17-赦罪補庫 18-天公生招財補運      
                        switch (service)
                        {
                            case 1:
                                //點燈
                                string startDate = "2024/11/01 00:00:00";
                                int ijj = DateTime.Compare(DateTime.Parse(startDate), dtNow);
                                if (DateTime.Compare(DateTime.Parse(startDate), dtNow) < 0 || Request["ad"] == "2")
                                {
                                    Year = "2025";
                                }

                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                int count = 0;
                                int cost = 0;
                                ApplicantID_Array = new int[0];
                                LightsID_Array = new int[0];
                                OrderID_Array = new string[0];

                                tempList_aid = ApplicantID_Array.ToList();
                                tempList_lid = LightsID_Array.ToList();
                                tempList_oid = OrderID_Array.ToList();

                                bool checkednum_da = true;
                                bool checkednum_wu = true;
                                bool checkednum_ty = true;
                                bool checkednum_dh = true;

                                int count_da = 0;
                                int index = 0;
                                int[] count_da_lights = new int[3];
                                string[] lightstypelist = new string[0];


                                int count_wu = 0;
                                index = 0;
                                int[] count_wu_lights = new int[3];
                                lightstypelist = new string[0];

                                int count_ty = 0;
                                index = 0;
                                int[] count_ty_lights = new int[6];


                                int count_dh = 0;
                                index = 0;
                                int[] count_dh_lights = new int[6];
                                lightstypelist = new string[0];

                                //// 創建一個 List 來存放 productCode 欄位
                                //List<string> productCodelist = new List<string>();
                                //// 創建一個 List 來存放 adminID 欄位
                                //List<string> adminIDlist = new List<string>();
                                //// 創建一個 List 來存放 Kind 欄位
                                //List<string> kindlist = new List<string>();
                                //// 創建一個 List 來存放 qty 欄位 (數量)
                                //List<int> qtylist = new List<int>();

                                //foreach (var item in itemsInfo)
                                //{
                                //    string productCodeString = item["productCode"]?.ToString();
                                //    if (productCodeString != null)
                                //    {
                                //        productCodelist.Add(productCodeString);

                                //        dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCodeString);
                                //        if (dtTempleCodeInfo.Rows.Count > 0)
                                //        {
                                //            string adminIDString = dtTempleCodeInfo.Rows[0]["AdminID"]?.ToString();
                                //            if (adminIDString != null)
                                //            {
                                //                adminIDlist.Add(adminIDString);
                                //            }
                                //        }
                                //    }

                                //    int qtyInt = 0;
                                //    if (int.TryParse(item["qty"].ToString(), out qtyInt))
                                //    {
                                //        qtylist.Add(qtyInt);
                                //    }

                                //    // 改用明確檢查是否為 null
                                //    //if (item["productCode"] != null)
                                //    //{
                                //    //    string productCodeString = item["productCode"].ToString();
                                //    //    productCodelist.Add(productCodeString);
                                //    //}
                                //}


                                foreach (var item2 in itemsInfo)
                                {
                                    //int.TryParse(item["unitPrice"].ToString(), out cost);
                                    string productCode2 = item2["productCode"].ToString();

                                    dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode2);
                                    if (dtTempleCodeInfo.Rows.Count > 0)
                                    {
                                        int.TryParse(dtTempleCodeInfo.Rows[0]["AdminID"].ToString(), out AdminID);
                                        int.TryParse(dtTempleCodeInfo.Rows[0]["ServiceID"].ToString(), out service);
                                        string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                                        string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                                        switch (AdminID)
                                        {
                                            case 3:
                                                lightstypelist = new string[0];
                                                int.TryParse(item2["qty"].ToString(), out count_da);
                                                var Ists = lightstypelist.ToList();
                                                lightstypelist = Ists.Append(LightsType).ToArray();

                                                switch (LightsType)
                                                {
                                                    case "3":
                                                        //光明燈
                                                        count_da_lights[0] += count_da;
                                                        break;
                                                    case "4":
                                                        //安太歲
                                                        count_da_lights[1] += count_da;
                                                        break;
                                                    case "5":
                                                        //文昌燈
                                                        count_da_lights[2] += count_da;
                                                        break;
                                                }
                                                break;
                                            case 6:
                                                lightstypelist = new string[0];
                                                int.TryParse(item2["qty"].ToString(), out count_wu);
                                                Ists = lightstypelist.ToList();
                                                lightstypelist = Ists.Append(LightsType).ToArray();

                                                switch (LightsType)
                                                {
                                                    case "3":
                                                        //光明燈
                                                        count_wu_lights[0]++;
                                                        break;
                                                    case "4":
                                                        //安太歲
                                                        count_wu_lights[1]++;
                                                        break;
                                                    case "6":
                                                        //財神燈
                                                        count_wu_lights[2]++;
                                                        break;
                                                }
                                                break;
                                            case 14:
                                                lightstypelist = new string[0];
                                                int.TryParse(item2["qty"].ToString(), out count_ty);
                                                Ists = lightstypelist.ToList();
                                                lightstypelist = Ists.Append(LightsType).ToArray();

                                                switch (LightsType)
                                                {
                                                    case "3":
                                                        //光明燈
                                                        count_ty_lights[0] += count_ty;
                                                        break;
                                                    case "4":
                                                        //安太歲
                                                        count_ty_lights[1] += count_ty;
                                                        break;
                                                    case "6":
                                                        //財神燈
                                                        count_ty_lights[2] += count_ty;
                                                        break;
                                                    case "8":
                                                        //藥師燈
                                                        count_ty_lights[3] += count_ty;
                                                        break;
                                                    case "10":
                                                        //貴人燈
                                                        count_ty_lights[4] += count_ty;
                                                        checkednum_ty = false;
                                                        break;
                                                    case "11":
                                                        //福祿燈
                                                        count_ty_lights[5] += count_ty;
                                                        break;
                                                    case "21":
                                                        //孝親祈福燈
                                                        //count_ty_lights[7] += count_ty;
                                                        //checkednum_ty = false;
                                                        break;
                                                    case "33":
                                                        //智慧燈
                                                        count_ty_lights[6] += count_ty;
                                                        break;
                                                }
                                                break;
                                            case 16:
                                                lightstypelist = new string[0];
                                                int.TryParse(item2["qty"].ToString(), out count_dh);
                                                Ists = lightstypelist.ToList();
                                                lightstypelist = Ists.Append(LightsType).ToArray();

                                                switch (LightsType)
                                                {
                                                    case "3":
                                                        //光明燈
                                                        count_dh_lights[0] += count_dh;
                                                        break;
                                                    case "4":
                                                        //安太歲
                                                        count_dh_lights[1] += count_dh;
                                                        break;
                                                    case "5":
                                                        //文昌燈
                                                        count_dh_lights[2] += count_dh;
                                                        checkednum_dh = false;
                                                        break;
                                                    case "9":
                                                        //財利燈
                                                        count_dh_lights[3] += count_dh;
                                                        break;
                                                    case "13":
                                                        //龍王燈
                                                        count_dh_lights[4] += count_dh;
                                                        checkednum_dh = false;
                                                        break;
                                                    case "14":
                                                        //虎爺燈
                                                        count_dh_lights[6] += count_dh;
                                                        checkednum_dh = false;
                                                        break;
                                                }
                                                break;

                                        }
                                    }
                                    index++;
                                }

                                if (count_da > 0)
                                {
                                    //string[] Lightstypelist = new string[] { "3", "4", "5" };
                                    for (int i = 0; i < lightstypelist.Length; i++)
                                    {
                                        int c = 0;

                                        c += lightstypelist[i] == "3" ? count_da_lights[0] : 0;
                                        c += lightstypelist[i] == "4" ? count_da_lights[1] : 0;
                                        c += lightstypelist[i] == "5" ? count_da_lights[2] : 0;

                                        if (objLightDAC.checkedLightsNum(lightstypelist[i], AdminID.ToString(), c, -1, Year))
                                        {
                                            checkednum_da = false; break;
                                        }
                                    }
                                }
                                
                                if (count_wu > 0)
                                {
                                    //Lightstypelist = new string[] { "3", "4", "6" };
                                    for (int i = 0; i < lightstypelist.Length; i++)
                                    {
                                        int c = 0;

                                        c += lightstypelist[i] == "3" ? count_wu_lights[0] : 0;
                                        c += lightstypelist[i] == "4" ? count_wu_lights[1] : 0;
                                        c += lightstypelist[i] == "6" ? count_wu_lights[2] : 0;

                                        if (objLightDAC.checkedLightsNum(lightstypelist[i], AdminID.ToString(), c, -1, Year))
                                        {
                                            checkednum_wu = false; break;
                                        }
                                    }
                                }
                                
                                if (count_ty > 0)
                                {
                                    //Lightstypelist = new string[] { "3", "4", "6", "8", "10", "11", "33" };
                                    for (int i = 0; i < lightstypelist.Length; i++)
                                    {
                                        int c = 0;

                                        c += lightstypelist[i] == "3" ? count_ty_lights[0] : 0;
                                        c += lightstypelist[i] == "4" ? count_ty_lights[1] : 0;
                                        c += lightstypelist[i] == "6" ? count_ty_lights[2] : 0;
                                        c += lightstypelist[i] == "8" ? count_ty_lights[3] : 0;
                                        c += lightstypelist[i] == "10" ? count_ty_lights[4] : 0;
                                        c += lightstypelist[i] == "11" ? count_ty_lights[5] : 0;
                                        c += lightstypelist[i] == "33" ? count_ty_lights[6] : 0;

                                        if (objLightDAC.checkedLightsNum(lightstypelist[i], AdminID.ToString(), c, 1, Year))
                                        {
                                            checkednum_ty = false; break;
                                        }
                                    }
                                }
                                
                                //if (count_dh > 0)
                                //{
                                //    //Lightstypelist = new string[] { "3", "4", "6", "8", "10", "11" };
                                //    for (int i = 0; i < lightstypelist.Length; i++)
                                //    {
                                //        int c = 0;

                                //        c += lightstypelist[i] == "3" ? count_dh_lights[0] : 0;
                                //        c += lightstypelist[i] == "4" ? count_dh_lights[1] : 0;
                                //        c += lightstypelist[i] == "6" ? count_dh_lights[2] : 0;
                                //        c += lightstypelist[i] == "8" ? count_dh_lights[3] : 0;
                                //        c += lightstypelist[i] == "10" ? count_dh_lights[4] : 0;
                                //        c += lightstypelist[i] == "11" ? count_dh_lights[5] : 0;

                                //        if (objLightDAC.checkedLightsNum(lightstypelist[i], AdminID.ToString(), c, 1, Year))
                                //        {
                                //            checkednum_dh = false; break;
                                //        }
                                //    }
                                //}

                                if (checkednum_da && checkednum_wu && checkednum_ty && checkednum_dh)
                                {
                                    foreach (var item in itemsInfo)
                                    {
                                        productCode = item["productCode"].ToString();
                                        dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                                        if (dtTempleCodeInfo.Rows.Count > 0)
                                        {
                                            int.TryParse(dtTempleCodeInfo.Rows[0]["AdminID"].ToString(), out AdminID);
                                            int.TryParse(dtTempleCodeInfo.Rows[0]["ServiceID"].ToString(), out service);
                                            //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                                            count = 1;
                                            int.TryParse(item["unitPrice"].ToString(), out cost);
                                            switch (AdminID)
                                            {
                                                case 3:
                                                    //大甲鎮瀾宮
                                                    if (checkednum_da)
                                                    {
                                                        ApplicantID = addapplicantID_da_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                            reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                        Applicant.Set(3, 1, ApplicantID);

                                                        tempList_aid.Add(ApplicantID);
                                                        tempList_lid.Add(LightsID);
                                                        tempList_oid.Add(OrderID);

                                                        ApplicantID_Array = tempList_aid.ToArray();
                                                        LightsID_Array = tempList_lid.ToArray();
                                                        OrderID_Array = tempList_oid.ToArray();

                                                        //if (ApplicantID > 0 && LightsID > 0 && OrderID != "0" && Lightslist.Length > 0)
                                                        //{
                                                        //    //JSON寫入到檔案
                                                        //    using (StringWriter sw = new StringWriter())
                                                        //    {
                                                        //        using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                        //        {
                                                        //            //建立物件
                                                        //            writer.WriteStartObject();

                                                        //            //物件名稱
                                                        //            writer.WritePropertyName("detail");

                                                        //            using (StringWriter sw2 = new StringWriter())
                                                        //            {
                                                        //                using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        //                {
                                                        //                    //建立物件
                                                        //                    writer2.WriteStartObject();

                                                        //                    writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber, fetOrderNumber));
                                                        //                    writer2.WriteValue(clientOrderNumber);

                                                        //                    writer2.WritePropertyName("partnerOrderNumber");
                                                        //                    writer2.WriteValue(OrderID);

                                                        //                    writer2.WritePropertyName("orderMsg");
                                                        //                    writer2.WriteValue("success");

                                                        //                    writer2.WritePropertyName("orderStatus");
                                                        //                    writer2.WriteValue("0000");

                                                        //                    writer2.WritePropertyName("items");
                                                        //                    //建立陣列
                                                        //                    writer2.WriteStartArray();
                                                        //                    int i = 0;
                                                        //                    foreach (var item in itemsInfo)
                                                        //                    {
                                                        //                        //建立物件
                                                        //                        writer2.WriteStartObject();

                                                        //                        //物件名稱
                                                        //                        writer2.WritePropertyName("productCode");
                                                        //                        writer2.WriteValue(item["productCode"]);

                                                        //                        writer2.WritePropertyName("prayedPerson");
                                                        //                        //建立陣列
                                                        //                        writer2.WriteStartArray();

                                                        //                        JArray prayedPerson = (JArray)item["prayedPerson"];
                                                        //                        foreach (var item2 in prayedPerson)
                                                        //                        {
                                                        //                            //建立物件
                                                        //                            writer2.WriteStartObject();
                                                        //                            writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                        //                            writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Lightslist[i]);
                                                        //                            writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                        //                            writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                        //                            writer2.WriteEndObject();
                                                        //                            i++;
                                                        //                        }
                                                        //                        writer2.WriteEndArray();

                                                        //                        writer2.WriteEndObject();
                                                        //                    }
                                                        //                    writer2.WriteEndArray();

                                                        //                    writer2.WriteEndObject();

                                                        //                    encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        //                }
                                                        //            }

                                                        //            writer.WriteValue(encrypt);

                                                        //            writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                        //            writer.WriteEndObject();

                                                        //            //建立陣列
                                                        //            //writer.WriteStartArray();
                                                        //            //for (int index = 1; index <= 10; index++)
                                                        //            //{
                                                        //            //    //建立物件
                                                        //            //    writer.WriteStartObject();
                                                        //            //    //設定屬性名稱
                                                        //            //    writer.WritePropertyName(String.Format("number", index));
                                                        //            //    //設定值
                                                        //            //    writer.WriteValue(index);
                                                        //            //    writer.WriteEndObject();
                                                        //            //}
                                                        //            //writer.WriteEndArray();

                                                        //            writer.Flush();
                                                        //            writer.Close();
                                                        //            sw.Flush();
                                                        //            sw.Close();

                                                        //            //輸出結果
                                                        //            Response.Write(sw.ToString());

                                                        //            SaveRequestLog(Request.Url + sw.ToString());
                                                        //        }
                                                        //    }
                                                        //}
                                                        //else
                                                        //{
                                                        //    //JSON寫入到檔案
                                                        //    using (StringWriter sw = new StringWriter())
                                                        //    {
                                                        //        using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                        //        {
                                                        //            //建立物件
                                                        //            writer.WriteStartObject();

                                                        //            //物件名稱
                                                        //            writer.WritePropertyName("detail");

                                                        //            using (StringWriter sw2 = new StringWriter())
                                                        //            {
                                                        //                using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        //                {
                                                        //                    //建立物件
                                                        //                    writer2.WriteStartObject();

                                                        //                    writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber, fetOrderNumber));
                                                        //                    writer2.WriteValue(clientOrderNumber);

                                                        //                    writer2.WritePropertyName("partnerOrderNumber");
                                                        //                    writer2.WriteValue(OrderID);

                                                        //                    writer2.WritePropertyName("orderMsg");
                                                        //                    writer2.WriteValue("fail");

                                                        //                    writer2.WritePropertyName("orderStatus");
                                                        //                    writer2.WriteValue("1003");

                                                        //                    writer2.WriteEndObject();

                                                        //                    encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        //                }
                                                        //            }

                                                        //            writer.WriteValue(encrypt);

                                                        //            writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                        //            writer.WriteEndObject();

                                                        //            writer.Flush();
                                                        //            writer.Close();
                                                        //            sw.Flush();
                                                        //            sw.Close();

                                                        //            //輸出結果
                                                        //            Response.Write(sw.ToString());

                                                        //            SaveRequestLog(Request.Url + sw.ToString());
                                                        //        }
                                                        //    }
                                                        //}
                                                    }
                                                    else
                                                    {
                                                        //JSON寫入到檔案
                                                        using (StringWriter sw = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                            {
                                                                //建立物件
                                                                writer.WriteStartObject();

                                                                //物件名稱
                                                                writer.WritePropertyName("detail");

                                                                using (StringWriter sw2 = new StringWriter())
                                                                {
                                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();

                                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                        writer2.WriteValue(clientOrderNumber);

                                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                                        writer2.WriteValue(OrderID);

                                                                        writer2.WritePropertyName("orderMsg");
                                                                        writer2.WriteValue("fail");

                                                                        writer2.WritePropertyName("orderStatus");
                                                                        writer2.WriteValue("1001");

                                                                        writer2.WriteEndObject();

                                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                                    }
                                                                }

                                                                writer.WriteValue(encrypt);

                                                                writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                                writer.WriteEndObject();

                                                                writer.Flush();
                                                                writer.Close();
                                                                sw.Flush();
                                                                sw.Close();

                                                                //輸出結果
                                                                Response.Write(sw.ToString());

                                                                SaveRequestLog(Request.Url + sw.ToString());
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 4:
                                                    //新港奉天宮
                                                    ApplicantID = addapplicantID_h_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();

                                                    break;
                                                case 6:
                                                    //北港武德宮
                                                    if (checkednum_wu)
                                                    {
                                                        ApplicantID = addapplicantID_wu_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                            reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                        tempList_aid.Add(ApplicantID);
                                                        tempList_lid.Add(LightsID);
                                                        tempList_oid.Add(OrderID);

                                                        ApplicantID_Array = tempList_aid.ToArray();
                                                        LightsID_Array = tempList_lid.ToArray();
                                                        OrderID_Array = tempList_oid.ToArray();
                                                    }
                                                    else
                                                    {
                                                        //JSON寫入到檔案
                                                        using (StringWriter sw = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                            {
                                                                //建立物件
                                                                writer.WriteStartObject();

                                                                //物件名稱
                                                                writer.WritePropertyName("detail");

                                                                using (StringWriter sw2 = new StringWriter())
                                                                {
                                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();

                                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                        writer2.WriteValue(clientOrderNumber);

                                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                                        writer2.WriteValue(OrderID);

                                                                        writer2.WritePropertyName("orderMsg");
                                                                        writer2.WriteValue("fail");

                                                                        writer2.WritePropertyName("orderStatus");
                                                                        writer2.WriteValue("1001");

                                                                        writer2.WriteEndObject();

                                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                                    }
                                                                }

                                                                writer.WriteValue(encrypt);

                                                                writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                                writer.WriteEndObject();

                                                                writer.Flush();
                                                                writer.Close();
                                                                sw.Flush();
                                                                sw.Close();

                                                                //輸出結果
                                                                Response.Write(sw.ToString());

                                                                SaveRequestLog(Request.Url + sw.ToString());
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 8:
                                                    //西螺福興宮
                                                    ApplicantID = addapplicantID_Fu_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 10:
                                                    //台南正統鹿耳門聖母廟
                                                    ApplicantID = addapplicantID_Luer_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 14:
                                                    //桃園威天宮
                                                    if (checkednum_ty)
                                                    {
                                                        string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                                                        if (LightsType == "21")
                                                        {
                                                            //孝親祈福燈
                                                            ApplicantID = addapplicantID_ty_Lights_mom(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                                applunarBirthday, appleapMonth, applunarBirthTime, appBirth, appemail, itemsInfo, clientOrderNumber, fetOrderNumber, Year,
                                                                ref Lightslist, ref LightsID, ref OrderID);
                                                        }
                                                        else
                                                        {
                                                            //一般點燈
                                                            ApplicantID = addapplicantID_ty_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                                reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);
                                                        }

                                                        tempList_aid.Add(ApplicantID);
                                                        tempList_lid.Add(LightsID);
                                                        tempList_oid.Add(OrderID);

                                                        ApplicantID_Array = tempList_aid.ToArray();
                                                        LightsID_Array = tempList_lid.ToArray();
                                                        OrderID_Array = tempList_oid.ToArray();
                                                    }
                                                    else
                                                    {
                                                        //JSON寫入到檔案
                                                        using (StringWriter sw = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                            {
                                                                //建立物件
                                                                writer.WriteStartObject();

                                                                //物件名稱
                                                                writer.WritePropertyName("detail");

                                                                using (StringWriter sw2 = new StringWriter())
                                                                {
                                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();

                                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                        writer2.WriteValue(clientOrderNumber);

                                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                                        writer2.WriteValue(OrderID);

                                                                        writer2.WritePropertyName("orderMsg");
                                                                        writer2.WriteValue("fail");

                                                                        writer2.WritePropertyName("orderStatus");
                                                                        writer2.WriteValue("1001");

                                                                        writer2.WriteEndObject();

                                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                                    }
                                                                }

                                                                writer.WriteValue(encrypt);

                                                                writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                                writer.WriteEndObject();

                                                                writer.Flush();
                                                                writer.Close();
                                                                sw.Flush();
                                                                sw.Close();

                                                                //輸出結果
                                                                Response.Write(sw.ToString());

                                                                SaveRequestLog(Request.Url + sw.ToString());
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 15:
                                                    //斗六五路財神宮
                                                    ApplicantID = addapplicantID_Fw_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 16:
                                                    //台東東海龍門天聖宮
                                                    if (checkednum_dh)
                                                    {
                                                        ApplicantID = addapplicantID_dh_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                            reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                        tempList_aid.Add(ApplicantID);
                                                        tempList_lid.Add(LightsID);
                                                        tempList_oid.Add(OrderID);

                                                        ApplicantID_Array = tempList_aid.ToArray();
                                                        LightsID_Array = tempList_lid.ToArray();
                                                        OrderID_Array = tempList_oid.ToArray();
                                                    }
                                                    else
                                                    {
                                                        //JSON寫入到檔案
                                                        using (StringWriter sw = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                            {
                                                                //建立物件
                                                                writer.WriteStartObject();

                                                                //物件名稱
                                                                writer.WritePropertyName("detail");

                                                                using (StringWriter sw2 = new StringWriter())
                                                                {
                                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();

                                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                        writer2.WriteValue(clientOrderNumber);

                                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                                        writer2.WriteValue(OrderID);

                                                                        writer2.WritePropertyName("orderMsg");
                                                                        writer2.WriteValue("fail");

                                                                        writer2.WritePropertyName("orderStatus");
                                                                        writer2.WriteValue("1001");

                                                                        writer2.WriteEndObject();

                                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                                    }
                                                                }

                                                                writer.WriteValue(encrypt);

                                                                writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                                writer.WriteEndObject();

                                                                writer.Flush();
                                                                writer.Close();
                                                                sw.Flush();
                                                                sw.Close();

                                                                //輸出結果
                                                                Response.Write(sw.ToString());

                                                                SaveRequestLog(Request.Url + sw.ToString());
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 21:
                                                    //鹿港城隍廟
                                                    ApplicantID = addapplicantID_Lk_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                        reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 23:
                                                    //玉敕大樹朝天宮

                                                    int count_ma = 0;
                                                    index = 0;
                                                    int[] count_ma_lights = new int[6];
                                                    lightstypelist = new string[0];

                                                    bool checkednum_ma = true;
                                                    foreach (var item2 in itemsInfo)
                                                    {
                                                        int.TryParse(item2["qty"].ToString(), out count_ma);
                                                        //int.TryParse(item["unitPrice"].ToString(), out cost);
                                                        string productCode2 = item2["productCode"].ToString();

                                                        dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode2);
                                                        if (dtTempleCodeInfo.Rows.Count > 0)
                                                        {
                                                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                                                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                                                            var Ists = lightstypelist.ToList();
                                                            lightstypelist = Ists.Append(LightsType).ToArray();

                                                            switch (LightsType)
                                                            {
                                                                case "3":
                                                                    //光明燈
                                                                    count_ma_lights[0]++;
                                                                    break;
                                                                case "4":
                                                                    //安太歲
                                                                    count_ma_lights[1]++;
                                                                    break;
                                                                case "6":
                                                                    //財神燈
                                                                    count_ma_lights[2]++;
                                                                    break;
                                                                case "8":
                                                                    //藥師燈
                                                                    count_ma_lights[3]++;
                                                                    break;
                                                                case "10":
                                                                    //貴人燈
                                                                    count_ma_lights[4]++;
                                                                    break;
                                                                case "11":
                                                                    //福祿燈
                                                                    count_ma_lights[5]++;
                                                                    break;
                                                            }
                                                        }
                                                        index++;
                                                    }

                                                    //Lightstypelist = new string[] { "3", "4", "6", "8", "10", "11" };
                                                    for (int i = 0; i < lightstypelist.Length; i++)
                                                    {
                                                        int c = 0;

                                                        c += lightstypelist[i] == "3" ? count_ma_lights[0] : 0;
                                                        c += lightstypelist[i] == "4" ? count_ma_lights[1] : 0;
                                                        c += lightstypelist[i] == "6" ? count_ma_lights[2] : 0;
                                                        c += lightstypelist[i] == "8" ? count_ma_lights[3] : 0;
                                                        c += lightstypelist[i] == "10" ? count_ma_lights[4] : 0;
                                                        c += lightstypelist[i] == "11" ? count_ma_lights[5] : 0;

                                                        if (objLightDAC.checkedLightsNum(lightstypelist[i], AdminID.ToString(), c, 1, Year))
                                                        {
                                                            checkednum_ma = false; break;
                                                        }
                                                    }

                                                    if (checkednum_ma)
                                                    {
                                                        ApplicantID = addapplicantID_ma_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                            reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                        tempList_aid.Add(ApplicantID);
                                                        tempList_lid.Add(LightsID);
                                                        tempList_oid.Add(OrderID);

                                                        ApplicantID_Array = tempList_aid.ToArray();
                                                        LightsID_Array = tempList_lid.ToArray();
                                                        OrderID_Array = tempList_oid.ToArray();
                                                    }
                                                    else
                                                    {
                                                        //JSON寫入到檔案
                                                        using (StringWriter sw = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                            {
                                                                //建立物件
                                                                writer.WriteStartObject();

                                                                //物件名稱
                                                                writer.WritePropertyName("detail");

                                                                using (StringWriter sw2 = new StringWriter())
                                                                {
                                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();

                                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                        writer2.WriteValue(clientOrderNumber);

                                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                                        writer2.WriteValue(OrderID);

                                                                        writer2.WritePropertyName("orderMsg");
                                                                        writer2.WriteValue("fail");

                                                                        writer2.WritePropertyName("orderStatus");
                                                                        writer2.WriteValue("1001");

                                                                        writer2.WriteEndObject();

                                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                                    }
                                                                }

                                                                writer.WriteValue(encrypt);

                                                                writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                                writer.WriteEndObject();

                                                                writer.Flush();
                                                                writer.Close();
                                                                sw.Flush();
                                                                sw.Close();

                                                                //輸出結果
                                                                Response.Write(sw.ToString());

                                                                SaveRequestLog(Request.Url + sw.ToString());
                                                            }
                                                        }
                                                    }
                                                    break;
                                                case 29:
                                                    //進寶財神廟
                                                    ApplicantID = addapplicantID_jb_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                        reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 31:
                                                    //台灣道教總廟無極三清總道院
                                                    ApplicantID = addapplicantID_wjsan_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                        reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 32:
                                                    //桃園龍德宮
                                                    ApplicantID = addapplicantID_ld_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                        reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 34:
                                                    //基隆悟玄宮
                                                    ApplicantID = addapplicantID_wh_Lights(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                                        reMobile, itemsInfo, productCode, clientOrderNumber, fetOrderNumber, Year, ref Lightslist, ref LightsID, ref OrderID);

                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_lid.Add(LightsID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    LightsID_Array = tempList_lid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                            }
                                        }
                                    }

                                    if (ApplicantID_Array.Length > 0 && LightsID_Array.Length > 0 && OrderID_Array.Length > 0 && Lightslist.Length > 0)
                                    {
                                        //JSON寫入到檔案
                                        using (StringWriter sw = new StringWriter())
                                        {
                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                            {
                                                //建立物件
                                                writer.WriteStartObject();

                                                //物件名稱
                                                writer.WritePropertyName("detail");

                                                using (StringWriter sw2 = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                    {
                                                        //建立物件
                                                        writer2.WriteStartObject();

                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                        writer2.WriteValue(clientOrderNumber);

                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                        writer2.WriteValue(OrderID);

                                                        writer2.WritePropertyName("orderMsg");
                                                        writer2.WriteValue("success");

                                                        writer2.WritePropertyName("orderStatus");
                                                        writer2.WriteValue("0000");

                                                        writer2.WritePropertyName("items");
                                                        //建立陣列
                                                        writer2.WriteStartArray();
                                                        int i = 0;
                                                        foreach (var item in itemsInfo)
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            //物件名稱
                                                            writer2.WritePropertyName("productCode");
                                                            writer2.WriteValue(item["productCode"]);

                                                            writer2.WritePropertyName("prayedPerson");
                                                            //建立陣列
                                                            writer2.WriteStartArray();

                                                            JArray prayedPerson = (JArray)item["prayedPerson"];
                                                            foreach (var item2 in prayedPerson)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();
                                                                writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Lightslist[i]);
                                                                writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                writer2.WriteEndObject();
                                                                i++;
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();
                                                        }
                                                        writer2.WriteEndArray();

                                                        writer2.WriteEndObject();

                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                    }
                                                }

                                                writer.WriteValue(encrypt);

                                                writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                writer.WriteEndObject();

                                                //建立陣列
                                                //writer.WriteStartArray();
                                                //for (int index = 1; index <= 10; index++)
                                                //{
                                                //    //建立物件
                                                //    writer.WriteStartObject();
                                                //    //設定屬性名稱
                                                //    writer.WritePropertyName(String.Format("number", index));
                                                //    //設定值
                                                //    writer.WriteValue(index);
                                                //    writer.WriteEndObject();
                                                //}
                                                //writer.WriteEndArray();

                                                writer.Flush();
                                                writer.Close();
                                                sw.Flush();
                                                sw.Close();

                                                //輸出結果
                                                Response.Write(sw.ToString());

                                                SaveRequestLog(Request.Url + sw.ToString());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        JSONErrorOrder(checkedkey, encrypt, "1003", "9999", "建立點燈訂單失敗！");
                                    }
                                }
                                else
                                {
                                    string errommsg = string.Empty;
                                    if(!checkednum_da)
                                    {
                                        errommsg = "大甲鎮瀾宮";
                                    }
                                    else if (!checkednum_wu)
                                    {
                                        errommsg = "北港武德宮";
                                    }
                                    else if (!checkednum_ty)
                                    {
                                        errommsg = "桃園威天宮";
                                    }
                                    else if (!checkednum_dh)
                                    {
                                        errommsg = "台東東海龍門天聖宮";
                                    }


                                    JSONErrorOrder(checkedkey, encrypt, "1003", "9999",  errommsg + " 燈種已額滿！");
                                }

                                break;
                            case 2:
                                //普度
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 3:
                                        //大甲鎮瀾宮
                                        ApplicantID = addapplicantID_da_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 4:
                                        //新港奉天宮
                                        ApplicantID = addapplicantID_h_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, appBirth, applunarBirthday, appleapMonth, 
                                            applunarBirthTime, appemail, sendback, reName, reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 6:
                                        //北港武德宮
                                        ApplicantID = addapplicantID_wu_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 8:
                                        //西螺福興宮
                                        ApplicantID = addapplicantID_Fu_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 9:
                                        //桃園大廟景福宮
                                        break;
                                    case 10:
                                        //台南正統鹿耳門聖母廟
                                        ApplicantID = addapplicantID_Luer_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 14:
                                        //桃園威天宮
                                        ApplicantID = addapplicantID_ty_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 15:
                                        //斗六五路財神宮
                                        ApplicantID = addapplicantID_Fw_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 16:
                                        //台東東海龍門天聖宮
                                        ApplicantID = addapplicantID_dh_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 21:
                                        //鹿港城隍廟
                                        ApplicantID = addapplicantID_Lk_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 23:
                                        //玉敕大樹朝天宮
                                        ApplicantID = addapplicantID_ma_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 30:
                                        //大甲鎮瀾宮-鎮瀾買足
                                        ApplicantID = addapplicantID_mazu_Purdue(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Purduelist, ref PurdueID, ref OrderID);
                                        if (ApplicantID > 0 && PurdueID > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Purduelist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 3:
                                //商品文創小販部
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                bool checkedproductstock = true;
                                count = 0;
                                cost = 0;
                                int overStatus = 0;
                                ApplicantID_Array = new int[0];
                                ProductID_Array = new int[0];
                                OrderID_Array = new string[0];

                                tempList_aid = ApplicantID_Array.ToList();
                                tempList_pid = ProductID_Array.ToList();
                                tempList_oid = OrderID_Array.ToList();

                                foreach (var item in itemsInfo)
                                {
                                    productCode = item["productCode"].ToString();
                                    dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                                    if (dtTempleCodeInfo.Rows.Count > 0)
                                    {
                                        int.TryParse(dtTempleCodeInfo.Rows[0]["AdminID"].ToString(), out AdminID);
                                        int.TryParse(dtTempleCodeInfo.Rows[0]["TypeID"].ToString(), out service);
                                        string type = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                                        int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                                        //count = 1;
                                        int.TryParse(item["unitPrice"].ToString(), out cost);


                                        if (objLightDAC.CheckedProductstock(count, type, out overStatus, Year))
                                        {
                                            checkedproductstock = false;
                                        }
                                    }
                                }

                                if (checkedproductstock)
                                {
                                    foreach (var item in itemsInfo)
                                    {
                                        productCode = item["productCode"].ToString();
                                        dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                                        if (dtTempleCodeInfo.Rows.Count > 0)
                                        {
                                            int.TryParse(dtTempleCodeInfo.Rows[0]["AdminID"].ToString(), out AdminID);
                                            int.TryParse(dtTempleCodeInfo.Rows[0]["ServiceID"].ToString(), out service);
                                            int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                                                                                                                                                                                    //count = 1;
                                            int.TryParse(item["unitPrice"].ToString(), out cost);

                                            switch (AdminID)
                                            {
                                                case 5:
                                                    //新港奉天宮商品販賣小舖
                                                    ApplicantID = addapplicantID_h_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, count.ToString(), cost.ToString(), productCode, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_pid.Add(ProductID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    ProductID_Array = tempList_pid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 20:
                                                    //西螺福興宮商品販賣小舖
                                                    ApplicantID = addapplicantID_Fu_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, count.ToString(), cost.ToString(), productCode, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_pid.Add(ProductID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    ProductID_Array = tempList_pid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 22:
                                                    //流金富貴商品販賣小舖
                                                    ApplicantID = addapplicantID_Fg_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, count.ToString(), cost.ToString(), productCode, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_pid.Add(ProductID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    ProductID_Array = tempList_pid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                                case 28:
                                                    //財神小舖商品販賣小舖
                                                    ApplicantID = addapplicantID_god_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                                        itemsInfo, count.ToString(), cost.ToString(), productCode, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                                    tempList_aid.Add(ApplicantID);
                                                    tempList_pid.Add(ProductID);
                                                    tempList_oid.Add(OrderID);

                                                    ApplicantID_Array = tempList_aid.ToArray();
                                                    ProductID_Array = tempList_pid.ToArray();
                                                    OrderID_Array = tempList_oid.ToArray();
                                                    break;
                                            }
                                        }
                                    }

                                    if (ApplicantID_Array.Length > 0 && ProductID_Array.Length > 0 && OrderID_Array.Length > 0 && Productlist.Length > 0)
                                    {
                                        //JSON寫入到檔案
                                        using (StringWriter sw = new StringWriter())
                                        {
                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                            {
                                                //建立物件
                                                writer.WriteStartObject();

                                                //物件名稱
                                                writer.WritePropertyName("detail");

                                                using (StringWriter sw2 = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                    {
                                                        //建立物件
                                                        writer2.WriteStartObject();

                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                        writer2.WriteValue(clientOrderNumber);

                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                        writer2.WriteValue(OrderID);

                                                        writer2.WritePropertyName("orderMsg");
                                                        writer2.WriteValue("success");

                                                        writer2.WritePropertyName("orderStatus");
                                                        writer2.WriteValue("0000");

                                                        writer2.WritePropertyName("items");
                                                        //建立陣列
                                                        writer2.WriteStartArray();
                                                        foreach (var item2 in itemsInfo)
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            //物件名稱
                                                            writer2.WritePropertyName("productCode");
                                                            writer2.WriteValue(item2["productCode"]);

                                                            writer2.WriteEndObject();
                                                        }
                                                        writer2.WriteEndArray();

                                                        writer2.WriteEndObject();

                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                    }
                                                }

                                                writer.WriteValue(encrypt);

                                                writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                writer.WriteEndObject();

                                                writer.Flush();
                                                writer.Close();
                                                sw.Flush();
                                                sw.Close();

                                                //輸出結果
                                                Response.Write(sw.ToString());

                                                SaveRequestLog(Request.Url + sw.ToString());
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //JSON寫入到檔案
                                        using (StringWriter sw = new StringWriter())
                                        {
                                            using (JsonTextWriter writer = new JsonTextWriter(sw))
                                            {
                                                //建立物件
                                                writer.WriteStartObject();

                                                //物件名稱
                                                writer.WritePropertyName("detail");

                                                using (StringWriter sw2 = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                    {
                                                        //建立物件
                                                        writer2.WriteStartObject();

                                                        writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                        writer2.WriteValue(clientOrderNumber);

                                                        writer2.WritePropertyName("partnerOrderNumber");
                                                        writer2.WriteValue(OrderID);

                                                        writer2.WritePropertyName("orderMsg");
                                                        writer2.WriteValue("fail");

                                                        writer2.WritePropertyName("orderStatus");
                                                        writer2.WriteValue("1003");

                                                        writer2.WriteEndObject();

                                                        encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                    }
                                                }

                                                writer.WriteValue(encrypt);

                                                writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                writer.WriteEndObject();

                                                writer.Flush();
                                                writer.Close();
                                                sw.Flush();
                                                sw.Close();

                                                //輸出結果
                                                Response.Write(sw.ToString());

                                                SaveRequestLog(Request.Url + sw.ToString());
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //JSON寫入到檔案
                                    using (StringWriter sw = new StringWriter())
                                    {
                                        using (JsonTextWriter writer = new JsonTextWriter(sw))
                                        {
                                            //建立物件
                                            writer.WriteStartObject();

                                            //物件名稱
                                            writer.WritePropertyName("detail");

                                            using (StringWriter sw2 = new StringWriter())
                                            {
                                                using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                {
                                                    //建立物件
                                                    writer2.WriteStartObject();

                                                    writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                    writer2.WriteValue(clientOrderNumber);

                                                    writer2.WritePropertyName("partnerOrderNumber");
                                                    writer2.WriteValue(OrderID);

                                                    writer2.WritePropertyName("orderMsg");
                                                    writer2.WriteValue("fail");

                                                    writer2.WritePropertyName("orderStatus");
                                                    writer2.WriteValue("1001");

                                                    writer2.WriteEndObject();

                                                    encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                }
                                            }

                                            writer.WriteValue(encrypt);

                                            writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                            writer.WriteEndObject();

                                            writer.Flush();
                                            writer.Close();
                                            sw.Flush();
                                            sw.Close();

                                            //輸出結果
                                            Response.Write(sw.ToString());

                                            SaveRequestLog(Request.Url + sw.ToString());
                                        }
                                    }
                                }
                                //switch (AdminID)
                                //{
                                //    case 5:
                                //        //新港奉天宮商品販賣小舖
                                //        ApplicantID = addapplicantID_h_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                //            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                //        if (ApplicantID > 0 && ProductID > 0 && OrderID != "0" && Productlist.Length > 0)
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("success");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("0000");

                                //                            writer2.WritePropertyName("items");
                                //                            //建立陣列
                                //                            writer2.WriteStartArray();
                                //                            foreach (var item in itemsInfo)
                                //                            {
                                //                                //建立物件
                                //                                writer2.WriteStartObject();

                                //                                //物件名稱
                                //                                writer2.WritePropertyName("productCode");
                                //                                writer2.WriteValue(item["productCode"]);

                                //                                writer2.WriteEndObject();
                                //                            }
                                //                            writer2.WriteEndArray();

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                //                    writer.WriteEndObject();

                                //                    //建立陣列
                                //                    //writer.WriteStartArray();
                                //                    //for (int index = 1; index <= 10; index++)
                                //                    //{
                                //                    //    //建立物件
                                //                    //    writer.WriteStartObject();
                                //                    //    //設定屬性名稱
                                //                    //    writer.WritePropertyName(String.Format("number", index));
                                //                    //    //設定值
                                //                    //    writer.WriteValue(index);
                                //                    //    writer.WriteEndObject();
                                //                    //}
                                //                    //writer.WriteEndArray();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        else
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("fail");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("1003");

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                //                    writer.WriteEndObject();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        break;
                                //    case 20:
                                //        //西螺福興宮商品販賣小舖
                                //        ApplicantID = addapplicantID_Fu_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                //            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                //        if (ApplicantID > 0 && ProductID > 0 && OrderID != "0" && Productlist.Length > 0)
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("success");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("0000");

                                //                            writer2.WritePropertyName("items");
                                //                            //建立陣列
                                //                            writer2.WriteStartArray();
                                //                            foreach (var item in itemsInfo)
                                //                            {
                                //                                //建立物件
                                //                                writer2.WriteStartObject();

                                //                                //物件名稱
                                //                                writer2.WritePropertyName("productCode");
                                //                                writer2.WriteValue(item["productCode"]);

                                //                                writer2.WriteEndObject();
                                //                            }

                                //                            writer2.WriteEndArray();

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                //                    writer.WriteEndObject();

                                //                    //建立陣列
                                //                    //writer.WriteStartArray();
                                //                    //for (int index = 1; index <= 10; index++)
                                //                    //{
                                //                    //    //建立物件
                                //                    //    writer.WriteStartObject();
                                //                    //    //設定屬性名稱
                                //                    //    writer.WritePropertyName(String.Format("number", index));
                                //                    //    //設定值
                                //                    //    writer.WriteValue(index);
                                //                    //    writer.WriteEndObject();
                                //                    //}
                                //                    //writer.WriteEndArray();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        else
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("fail");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("1003");

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                //                    writer.WriteEndObject();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        break;
                                //    case 22:
                                //        //流金富貴商品販賣小舖
                                //        ApplicantID = addapplicantID_Fg_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                //            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                //        if (ApplicantID > 0 && ProductID > 0 && OrderID != "0" && Productlist.Length > 0)
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("success");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("0000");

                                //                            writer2.WritePropertyName("items");
                                //                            //建立陣列
                                //                            writer2.WriteStartArray();
                                //                            foreach (var item in itemsInfo)
                                //                            {
                                //                                //建立物件
                                //                                writer2.WriteStartObject();

                                //                                //物件名稱
                                //                                writer2.WritePropertyName("productCode");
                                //                                writer2.WriteValue(item["productCode"]);

                                //                                writer2.WriteEndObject();
                                //                            }
                                //                            writer2.WriteEndArray();

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                //                    writer.WriteEndObject();

                                //                    //建立陣列
                                //                    //writer.WriteStartArray();
                                //                    //for (int index = 1; index <= 10; index++)
                                //                    //{
                                //                    //    //建立物件
                                //                    //    writer.WriteStartObject();
                                //                    //    //設定屬性名稱
                                //                    //    writer.WritePropertyName(String.Format("number", index));
                                //                    //    //設定值
                                //                    //    writer.WriteValue(index);
                                //                    //    writer.WriteEndObject();
                                //                    //}
                                //                    //writer.WriteEndArray();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        else
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("fail");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("1003");

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                //                    writer.WriteEndObject();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        break;
                                //    case 28:
                                //        //財神小舖商品販賣小舖
                                //        ApplicantID = addapplicantID_god_Product(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                //            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Productlist, ref ProductID, ref OrderID);
                                //        if (ApplicantID > 0 && ProductID > 0 && OrderID != "0" && Productlist.Length > 0)
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("success");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("0000");

                                //                            writer2.WritePropertyName("items");
                                //                            //建立陣列
                                //                            writer2.WriteStartArray();
                                //                            foreach (var item in itemsInfo)
                                //                            {
                                //                                //建立物件
                                //                                writer2.WriteStartObject();

                                //                                //物件名稱
                                //                                writer2.WritePropertyName("productCode");
                                //                                writer2.WriteValue(item["productCode"]);

                                //                                writer2.WriteEndObject();
                                //                            }

                                //                            writer2.WriteEndArray();

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                //                    writer.WriteEndObject();

                                //                    //建立陣列
                                //                    //writer.WriteStartArray();
                                //                    //for (int index = 1; index <= 10; index++)
                                //                    //{
                                //                    //    //建立物件
                                //                    //    writer.WriteStartObject();
                                //                    //    //設定屬性名稱
                                //                    //    writer.WritePropertyName(String.Format("number", index));
                                //                    //    //設定值
                                //                    //    writer.WriteValue(index);
                                //                    //    writer.WriteEndObject();
                                //                    //}
                                //                    //writer.WriteEndArray();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        else
                                //        {
                                //            //JSON寫入到檔案
                                //            using (StringWriter sw = new StringWriter())
                                //            {
                                //                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                //                {
                                //                    //建立物件
                                //                    writer.WriteStartObject();

                                //                    //物件名稱
                                //                    writer.WritePropertyName("detail");

                                //                    using (StringWriter sw2 = new StringWriter())
                                //                    {
                                //                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                //                        {
                                //                            //建立物件
                                //                            writer2.WriteStartObject();

                                //                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                //                            writer2.WriteValue(clientOrderNumber);

                                //                            writer2.WritePropertyName("partnerOrderNumber");
                                //                            writer2.WriteValue(OrderID);

                                //                            writer2.WritePropertyName("orderMsg");
                                //                            writer2.WriteValue("fail");

                                //                            writer2.WritePropertyName("orderStatus");
                                //                            writer2.WriteValue("1003");

                                //                            writer2.WriteEndObject();

                                //                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                //                        }
                                //                    }

                                //                    writer.WriteValue(encrypt);

                                //                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                //                    writer.WriteEndObject();

                                //                    writer.Flush();
                                //                    writer.Close();
                                //                    sw.Flush();
                                //                    sw.Close();

                                //                    //輸出結果
                                //                    Response.Write(sw.ToString());

                                //                    SaveRequestLog(Request.Url + sw.ToString());
                                //                }
                                //            }
                                //        }
                                //        break;
                                //}

                                break;
                            case 4:
                                //下元補庫
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 6:
                                        //北港武德宮
                                        checkednum_wu = true;
                                        //checkednum_wu = false;

                                        if (checkednum_wu)
                                        {
                                            ApplicantID = addapplicantID_wu_Supplies(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, 
                                                reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                            if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                            {
                                                //JSON寫入到檔案
                                                using (StringWriter sw = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                    {
                                                        //建立物件
                                                        writer.WriteStartObject();

                                                        //物件名稱
                                                        writer.WritePropertyName("detail");

                                                        using (StringWriter sw2 = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                writer2.WriteValue(clientOrderNumber);

                                                                writer2.WritePropertyName("partnerOrderNumber");
                                                                writer2.WriteValue(OrderID);

                                                                writer2.WritePropertyName("orderMsg");
                                                                writer2.WriteValue("success");

                                                                writer2.WritePropertyName("orderStatus");
                                                                writer2.WriteValue("0000");

                                                                writer2.WritePropertyName("items");
                                                                //建立陣列
                                                                writer2.WriteStartArray();
                                                                int i = 0;
                                                                foreach (var item in itemsInfo)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();

                                                                    //物件名稱
                                                                    writer2.WritePropertyName("productCode");
                                                                    writer2.WriteValue(item["productCode"]);

                                                                    writer2.WritePropertyName("prayedPerson");
                                                                    //建立陣列
                                                                    writer2.WriteStartArray();

                                                                    JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                    foreach (var item2 in prayedPerson)
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();
                                                                        writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                        writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                        writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                        writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                        writer2.WriteEndObject();
                                                                        i++;
                                                                    }
                                                                    writer2.WriteEndArray();

                                                                    writer2.WriteEndObject();
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();

                                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                            }
                                                        }

                                                        writer.WriteValue(encrypt);

                                                        writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                        writer.WriteEndObject();

                                                        //建立陣列
                                                        //writer.WriteStartArray();
                                                        //for (int index = 1; index <= 10; index++)
                                                        //{
                                                        //    //建立物件
                                                        //    writer.WriteStartObject();
                                                        //    //設定屬性名稱
                                                        //    writer.WritePropertyName(String.Format("number", index));
                                                        //    //設定值
                                                        //    writer.WriteValue(index);
                                                        //    writer.WriteEndObject();
                                                        //}
                                                        //writer.WriteEndArray();

                                                        writer.Flush();
                                                        writer.Close();
                                                        sw.Flush();
                                                        sw.Close();

                                                        //輸出結果
                                                        Response.Write(sw.ToString());

                                                        SaveRequestLog(Request.Url + sw.ToString());
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //JSON寫入到檔案
                                                using (StringWriter sw = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                    {
                                                        //建立物件
                                                        writer.WriteStartObject();

                                                        //物件名稱
                                                        writer.WritePropertyName("detail");

                                                        using (StringWriter sw2 = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                writer2.WriteValue(clientOrderNumber);

                                                                writer2.WritePropertyName("partnerOrderNumber");
                                                                writer2.WriteValue(OrderID);

                                                                writer2.WritePropertyName("orderMsg");
                                                                writer2.WriteValue("fail");

                                                                writer2.WritePropertyName("orderStatus");
                                                                writer2.WriteValue("1003");

                                                                writer2.WriteEndObject();

                                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                            }
                                                        }

                                                        writer.WriteValue(encrypt);

                                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                        writer.WriteEndObject();

                                                        writer.Flush();
                                                        writer.Close();
                                                        sw.Flush();
                                                        sw.Close();

                                                        //輸出結果
                                                        Response.Write(sw.ToString());

                                                        SaveRequestLog(Request.Url + sw.ToString());
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1001");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 5:
                                //天官武財神聖誕補財庫
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 6:
                                        //北港武德宮
                                        checkednum_wu = true;

                                        if (checkednum_wu)
                                        {
                                            ApplicantID = addapplicantID_wu_Supplies2(appName, appMobile, total, appemail, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                                itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                            if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                            {
                                                //JSON寫入到檔案
                                                using (StringWriter sw = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                    {
                                                        //建立物件
                                                        writer.WriteStartObject();

                                                        //物件名稱
                                                        writer.WritePropertyName("detail");

                                                        using (StringWriter sw2 = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                writer2.WriteValue(clientOrderNumber);

                                                                writer2.WritePropertyName("partnerOrderNumber");
                                                                writer2.WriteValue(OrderID);

                                                                writer2.WritePropertyName("orderMsg");
                                                                writer2.WriteValue("success");

                                                                writer2.WritePropertyName("orderStatus");
                                                                writer2.WriteValue("0000");

                                                                writer2.WritePropertyName("items");
                                                                //建立陣列
                                                                writer2.WriteStartArray();
                                                                int i = 0;
                                                                foreach (var item in itemsInfo)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();

                                                                    //物件名稱
                                                                    writer2.WritePropertyName("productCode");
                                                                    writer2.WriteValue(item["productCode"]);

                                                                    writer2.WritePropertyName("prayedPerson");
                                                                    //建立陣列
                                                                    writer2.WriteStartArray();

                                                                    JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                    foreach (var item2 in prayedPerson)
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();
                                                                        writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                        writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                        writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                        writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                        writer2.WriteEndObject();
                                                                        i++;
                                                                    }
                                                                    writer2.WriteEndArray();

                                                                    writer2.WriteEndObject();
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();

                                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                            }
                                                        }

                                                        writer.WriteValue(encrypt);

                                                        writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                        writer.WriteEndObject();

                                                        //建立陣列
                                                        //writer.WriteStartArray();
                                                        //for (int index = 1; index <= 10; index++)
                                                        //{
                                                        //    //建立物件
                                                        //    writer.WriteStartObject();
                                                        //    //設定屬性名稱
                                                        //    writer.WritePropertyName(String.Format("number", index));
                                                        //    //設定值
                                                        //    writer.WriteValue(index);
                                                        //    writer.WriteEndObject();
                                                        //}
                                                        //writer.WriteEndArray();

                                                        writer.Flush();
                                                        writer.Close();
                                                        sw.Flush();
                                                        sw.Close();

                                                        //輸出結果
                                                        Response.Write(sw.ToString());

                                                        SaveRequestLog(Request.Url + sw.ToString());
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //JSON寫入到檔案
                                                using (StringWriter sw = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                    {
                                                        //建立物件
                                                        writer.WriteStartObject();

                                                        //物件名稱
                                                        writer.WritePropertyName("detail");

                                                        using (StringWriter sw2 = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                writer2.WriteValue(clientOrderNumber);

                                                                writer2.WritePropertyName("partnerOrderNumber");
                                                                writer2.WriteValue(OrderID);

                                                                writer2.WritePropertyName("orderMsg");
                                                                writer2.WriteValue("fail");

                                                                writer2.WritePropertyName("orderStatus");
                                                                writer2.WriteValue("1003");

                                                                writer2.WriteEndObject();

                                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                            }
                                                        }

                                                        writer.WriteValue(encrypt);

                                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                        writer.WriteEndObject();

                                                        writer.Flush();
                                                        writer.Close();
                                                        sw.Flush();
                                                        sw.Close();

                                                        //輸出結果
                                                        Response.Write(sw.ToString());

                                                        SaveRequestLog(Request.Url + sw.ToString());
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1001");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 6:
                                //企業補財庫
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 6:
                                        //北港武德宮
                                        //int count_wu = 0;
                                        //int index = 0;
                                        //int[] count_wu_supplies = new int[3];
                                        //string[] suppliestypelist = new string[0];

                                        checkednum_wu = true;
                                        //foreach (var item in itemsInfo)
                                        //{
                                        //    int.TryParse(item["qty"].ToString(), out count_wu);
                                        //    //int.TryParse(item["unitPrice"].ToString(), out cost);
                                        //    productCode = item["productCode"].ToString();

                                        //    dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                                        //    if (dtTempleCodeInfo.Rows.Count > 0)
                                        //    {
                                        //        string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                                        //        string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                                        //        var Ists = suppliestypelist.ToList();
                                        //        suppliestypelist = Ists.Append(LightsType).ToArray();

                                        //        switch (LightsType)
                                        //        {
                                        //            case "3":
                                        //                //光明燈
                                        //                count_wu_supplies[0]++;
                                        //                break;
                                        //            case "4":
                                        //                //安太歲
                                        //                count_wu_supplies[1]++;
                                        //                break;
                                        //            case "6":
                                        //                //財神燈
                                        //                count_wu_supplies[2]++;
                                        //                break;
                                        //        }
                                        //    }
                                        //    index++;
                                        //}

                                        ////Lightstypelist = new string[] { "3", "4", "6" };
                                        //for (int i = 0; i < suppliestypelist.Length; i++)
                                        //{
                                        //    if (objLightDAC.checkedSuppliesNum3(suppliestypelist[i], AdminID.ToString(), count_wu_supplies[i], Year))
                                        //    {
                                        //        checkednum_wu = false; break;
                                        //    }
                                        //}

                                        //checkednum_wu = false;

                                        if (checkednum_wu)
                                        {
                                            ApplicantID = addapplicantID_wu_Supplies3(appName, appMobile, total, appemail, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                                itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                            if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                            {
                                                //JSON寫入到檔案
                                                using (StringWriter sw = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                    {
                                                        //建立物件
                                                        writer.WriteStartObject();

                                                        //物件名稱
                                                        writer.WritePropertyName("detail");

                                                        using (StringWriter sw2 = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                writer2.WriteValue(clientOrderNumber);

                                                                writer2.WritePropertyName("partnerOrderNumber");
                                                                writer2.WriteValue(OrderID);

                                                                writer2.WritePropertyName("orderMsg");
                                                                writer2.WriteValue("success");

                                                                writer2.WritePropertyName("orderStatus");
                                                                writer2.WriteValue("0000");

                                                                writer2.WritePropertyName("items");
                                                                //建立陣列
                                                                writer2.WriteStartArray();
                                                                int i = 0;
                                                                foreach (var item in itemsInfo)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();

                                                                    //物件名稱
                                                                    writer2.WritePropertyName("productCode");
                                                                    writer2.WriteValue(item["productCode"]);

                                                                    writer2.WritePropertyName("prayedPerson");
                                                                    //建立陣列
                                                                    writer2.WriteStartArray();

                                                                    JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                    foreach (var item2 in prayedPerson)
                                                                    {
                                                                        //建立物件
                                                                        writer2.WriteStartObject();
                                                                        writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                        writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                        writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                        writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                        writer2.WriteEndObject();
                                                                        i++;
                                                                    }
                                                                    writer2.WriteEndArray();

                                                                    writer2.WriteEndObject();
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();

                                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                            }
                                                        }

                                                        writer.WriteValue(encrypt);

                                                        writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                        writer.WriteEndObject();

                                                        //建立陣列
                                                        //writer.WriteStartArray();
                                                        //for (int index = 1; index <= 10; index++)
                                                        //{
                                                        //    //建立物件
                                                        //    writer.WriteStartObject();
                                                        //    //設定屬性名稱
                                                        //    writer.WritePropertyName(String.Format("number", index));
                                                        //    //設定值
                                                        //    writer.WriteValue(index);
                                                        //    writer.WriteEndObject();
                                                        //}
                                                        //writer.WriteEndArray();

                                                        writer.Flush();
                                                        writer.Close();
                                                        sw.Flush();
                                                        sw.Close();

                                                        //輸出結果
                                                        Response.Write(sw.ToString());

                                                        SaveRequestLog(Request.Url + sw.ToString());
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //JSON寫入到檔案
                                                using (StringWriter sw = new StringWriter())
                                                {
                                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                    {
                                                        //建立物件
                                                        writer.WriteStartObject();

                                                        //物件名稱
                                                        writer.WritePropertyName("detail");

                                                        using (StringWriter sw2 = new StringWriter())
                                                        {
                                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                                writer2.WriteValue(clientOrderNumber);

                                                                writer2.WritePropertyName("partnerOrderNumber");
                                                                writer2.WriteValue(OrderID);

                                                                writer2.WritePropertyName("orderMsg");
                                                                writer2.WriteValue("fail");

                                                                writer2.WritePropertyName("orderStatus");
                                                                writer2.WriteValue("1003");

                                                                writer2.WriteEndObject();

                                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                            }
                                                        }

                                                        writer.WriteValue(encrypt);

                                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                        writer.WriteEndObject();

                                                        writer.Flush();
                                                        writer.Close();
                                                        sw.Flush();
                                                        sw.Close();

                                                        //輸出結果
                                                        Response.Write(sw.ToString());

                                                        SaveRequestLog(Request.Url + sw.ToString());
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1001");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 7:
                                //天赦日招財補運
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 14:
                                        //桃園威天宮
                                        ApplicantID = addapplicantID_ty_Supplies(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                            applunarBirthday, appleapMonth, applunarBirthTime, appBirth, appemail, itemsInfo, clientOrderNumber, fetOrderNumber, Year, 
                                            ref Supplieslist, ref SuppliesID, ref OrderID);
                                        if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 23:
                                        //玉敕大樹朝天宮
                                        ApplicantID = addapplicantID_ma_Supplies(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile,
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                        if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break; 
                                }
                                break;
                            case 8:
                                //天赦日祭改
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 29:
                                        //進寶財神廟
                                        ApplicantID = addapplicantID_jb_Supplies(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, 
                                            itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                        if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 10:
                                //代燒金紙
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 29:
                                        //進寶財神廟
                                        ApplicantID = addapplicantID_jb_BPO(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, itemsInfo, 
                                            clientOrderNumber, fetOrderNumber, Year, ref BPOlist, ref BPOID, ref OrderID);
                                        if (ApplicantID > 0 && BPOID > 0 && OrderID != "0" && BPOlist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(BPOlist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 12:
                                //靈寶禮斗
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 23:
                                        //玉敕大樹朝天宮
                                        ApplicantID = addapplicantID_ma_Lingbaolidou(appName, appMobile, appemail, total, appCity, appRegion, appAddr, appzipCode, sendback, reName,
                                            reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Lingbaolidoulist, ref LingbaolidouID, ref OrderID);
                                        if (ApplicantID > 0 && LingbaolidouID > 0 && OrderID != "0" && Lingbaolidoulist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Lingbaolidoulist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;                                
                            case 13:
                                //七朝清醮
                                Year = dtNow.Year.ToString();
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 3:
                                        //大甲鎮瀾宮
                                        ApplicantID = addapplicantID_da_TaoistJiaoCeremony(appName, appMobile, appemail, total, appCity, appRegion, appAddr, appzipCode, sendback, 
                                            reName, reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref TaoistJiaoCeremonylist, ref TaoistJiaoCeremonyID, ref OrderID);
                                        if (ApplicantID > 0 && TaoistJiaoCeremonyID > 0 && OrderID != "0" && TaoistJiaoCeremonylist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(TaoistJiaoCeremonylist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 16:
                                //補財庫
                                Year = "2025";
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 15:
                                        //斗六五路財神宮
                                        ApplicantID = addapplicantID_Fw_Supplies(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback,
                                            reName, reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                        if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                    case 21:
                                        //鹿港城隍廟
                                        ApplicantID = addapplicantID_Lk_Supplies(appName, appMobile, total, appCity, appRegion, appAddr, appzipCode, sendback,
                                            reName, reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, ref SuppliesID, ref OrderID);
                                        if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                            case 17:
                                //赦罪補庫
                                break;
                            case 18:
                                //天公生招財補運-桃園威天宮
                                Year = "2025";
                                if (URL.IndexOf("20.6.8.46") >= 0 || URL.IndexOf("fettest") >= 0)
                                {
                                    Year = "TEST";
                                }

                                switch (AdminID)
                                {
                                    case 14:
                                        //桃園威天宮
                                        ApplicantID = addapplicantID_ty_Supplies3(appName, appMobile, applunarBirthday, appleapMonth, applunarBirthTime, appBirth, appemail, total, 
                                            appCity, appRegion, appAddr, appzipCode, sendback, reName, reMobile, itemsInfo, clientOrderNumber, fetOrderNumber, Year, ref Supplieslist, 
                                            ref SuppliesID, ref OrderID);
                                        if (ApplicantID > 0 && SuppliesID > 0 && OrderID != "0" && Supplieslist.Length > 0)
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("success");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("0000");

                                                            writer2.WritePropertyName("items");
                                                            //建立陣列
                                                            writer2.WriteStartArray();
                                                            int i = 0;
                                                            foreach (var item in itemsInfo)
                                                            {
                                                                //建立物件
                                                                writer2.WriteStartObject();

                                                                //物件名稱
                                                                writer2.WritePropertyName("productCode");
                                                                writer2.WriteValue(item["productCode"]);

                                                                writer2.WritePropertyName("prayedPerson");
                                                                //建立陣列
                                                                writer2.WriteStartArray();

                                                                JArray prayedPerson = (JArray)item["prayedPerson"];
                                                                foreach (var item2 in prayedPerson)
                                                                {
                                                                    //建立物件
                                                                    writer2.WriteStartObject();
                                                                    writer2.WritePropertyName("prayedPersonSeq"); writer2.WriteValue(item2["prayedPersonSeq"]);
                                                                    writer2.WritePropertyName("prayedPersonOrderNumber"); writer2.WriteValue(Supplieslist[i]);
                                                                    writer2.WritePropertyName("sessionSeq"); writer2.WriteValue("");
                                                                    writer2.WritePropertyName("sessionName"); writer2.WriteValue("");
                                                                    writer2.WriteEndObject();
                                                                    i++;
                                                                }
                                                                writer2.WriteEndArray();

                                                                writer2.WriteEndObject();
                                                            }
                                                            writer2.WriteEndArray();

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("0000");

                                                    writer.WriteEndObject();

                                                    //建立陣列
                                                    //writer.WriteStartArray();
                                                    //for (int index = 1; index <= 10; index++)
                                                    //{
                                                    //    //建立物件
                                                    //    writer.WriteStartObject();
                                                    //    //設定屬性名稱
                                                    //    writer.WritePropertyName(String.Format("number", index));
                                                    //    //設定值
                                                    //    writer.WriteValue(index);
                                                    //    writer.WriteEndObject();
                                                    //}
                                                    //writer.WriteEndArray();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //JSON寫入到檔案
                                            using (StringWriter sw = new StringWriter())
                                            {
                                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                                {
                                                    //建立物件
                                                    writer.WriteStartObject();

                                                    //物件名稱
                                                    writer.WritePropertyName("detail");

                                                    using (StringWriter sw2 = new StringWriter())
                                                    {
                                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                                        {
                                                            //建立物件
                                                            writer2.WriteStartObject();

                                                            writer2.WritePropertyName(string.Format("clientOrderNumber", clientOrderNumber));
                                                            writer2.WriteValue(clientOrderNumber);

                                                            writer2.WritePropertyName("partnerOrderNumber");
                                                            writer2.WriteValue(OrderID);

                                                            writer2.WritePropertyName("orderMsg");
                                                            writer2.WriteValue("fail");

                                                            writer2.WritePropertyName("orderStatus");
                                                            writer2.WriteValue("1003");

                                                            writer2.WriteEndObject();

                                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                                        }
                                                    }

                                                    writer.WriteValue(encrypt);

                                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                                    writer.WriteEndObject();

                                                    writer.Flush();
                                                    writer.Close();
                                                    sw.Flush();
                                                    sw.Close();

                                                    //輸出結果
                                                    Response.Write(sw.ToString());

                                                    SaveRequestLog(Request.Url + sw.ToString());
                                                }
                                            }
                                        }
                                        break;
                                }
                                break;
                        }
                    }
                    else
                    {
                        JSONErrorOrder(checkedkey, encrypt, "1003", "9999", "商品代碼不存在!");
                    }
                }
            }
            catch(Exception ex)
            {
                //JSON寫入到檔案
                using (StringWriter sw = new StringWriter())
                {
                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                    {
                        //建立物件
                        writer.WriteStartObject();

                        //物件名稱
                        writer.WritePropertyName("detail");

                        using (StringWriter sw2 = new StringWriter())
                        {
                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                            {
                                //建立物件
                                writer2.WriteStartObject();

                                writer2.WritePropertyName("orderMsg");
                                writer2.WriteValue("fail");

                                writer2.WritePropertyName("orderStatus");
                                writer2.WriteValue("1003");

                                writer2.WriteEndObject();

                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);

                                writer2.Flush();
                                writer2.Close();
                                sw2.Flush();
                                sw2.Close();
                            }
                        }

                        writer.WriteValue(encrypt);

                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                        writer.WriteEndObject();

                        writer.Flush();
                        writer.Close();
                        sw.Flush();
                        sw.Close();

                        LightDAC objLightDAC = new LightDAC(this);
                        decrypt = AESHelper.AesDecrypt(encryptText, checkedkey);
                        JObject obj = JsonConvert.DeserializeObject<JObject>(decrypt);
                        JArray itemsInfo = (JArray)obj["items"];
                        string productCode = itemsInfo[0]["productCode"].ToString();
                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {

                            int.TryParse(dtTempleCodeInfo.Rows[0]["AdminID"].ToString(), out AdminID);
                            int.TryParse(dtTempleCodeInfo.Rows[0]["ServiceID"].ToString(), out service);
                            if (AdminID != 0)
                            {
                                if (ApplicantID != 0 && LightsID != 0)
                                {
                                    DeleteLightsInfo(AdminID, 1, ApplicantID);
                                }

                                if (ApplicantID != 0 && PurdueID != 0)
                                {
                                    DeletePurdueInfo(AdminID, ApplicantID);
                                }

                                if (ApplicantID != 0 && ProductID != 0)
                                {
                                    DeleteProductInfo(AdminID, ApplicantID);
                                }

                                if (ApplicantID != 0 && SuppliesID != 0)
                                {
                                    DeleteSuppliesInfo(AdminID, ApplicantID, service);
                                }

                                if (ApplicantID != 0 && BPOID != 0)
                                {
                                    DeleteBPOInfo(AdminID, ApplicantID);
                                }

                                if (ApplicantID != 0 && LingbaolidouID != 0)
                                {
                                    DeleteLingbaolidouInfo(AdminID, ApplicantID);
                                }

                                if (ApplicantID != 0 && TaoistJiaoCeremonyID != 0)
                                {
                                    DeleteTaoistJiaoCeremonyInfo(AdminID, ApplicantID);
                                }

                            }
                        }

                        SaveRequestLog(Request.Url + sw.ToString() + (ex.InnerException == null ? ex.Message : ex.InnerException.Message));

                        //輸出結果
                        Response.Write(sw.ToString());
                    }
                }
            }
        }

        static string encrypt(byte[] key, byte[] IV, string data)
        {
            byte[] encrypted;
            byte[] toEncryptArray = Encoding.UTF8.GetBytes(data);
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = key;
                aesAlg.IV = IV;
                aesAlg.Mode = CipherMode.CBC;
                aesAlg.Padding = PaddingMode.PKCS7;
                var encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);


                ICryptoTransform cTransform = aesAlg.CreateEncryptor();
                byte[] resultArray = cTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);
                string ssss = Convert.ToBase64String(resultArray, 0, resultArray.Length);
                // create the streams used for encryption.
                using (var msEncrypt = new MemoryStream())
                {
                    using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (var swEncrypt = new StreamWriter(csEncrypt))
                        {
                            //Write all data to the stream.
                            swEncrypt.Write(data);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }
            return Convert.ToBase64String(encrypted);
        }

        protected void Init()
        {
            //switch (AdminID)
            //{
            //    case 3:
            //        //大甲鎮瀾宮
            //        break;
            //    case 4:
            //        //新港奉天宮
            //        break;
            //    case 5:
            //        //文創小販部
            //        break;
            //    case 6:
            //        //北港武德宮
            //        break;
            //    case 7:
            //        //繞境商品文創小販部
            //        break;
            //    case 8:
            //        //西螺福興宮
            //        break;
            //    case 9:
            //        //桃園大廟景福宮
            //        break;
            //    case 10:
            //        //台南正統鹿耳門聖母廟
            //        break;
            //    case 11:
            //        //鎮宅錢母擺件文創小販部
            //        break;
            //    case 14:
            //        //桃園威天宮
            //        break;
            //    case 15:
            //        //斗六五路財神宮
            //        break;
            //    case 16:
            //        //台東東海龍門天聖宮
            //        break;
            //    case 21:
            //        //鹿港城隍廟
            //        break;
            //    case 23:
            //        //玉敕大樹朝天宮
            //        break;
            //}


            //switch (service)
            //{
            //    case 1:
            //        //點燈
            //        break;
            //    case 2:
            //        //普度
            //        break;
            //    case 4:
            //        //下元補庫
            //        break;
            //    case 5:
            //        //呈疏補庫(天官武財神聖誕補財庫)
            //        break;
            //    case 6:
            //        //企業補財庫
            //        break;
            //    case 7:
            //        //天赦日補運
            //        break;
            //    case 8:
            //        //天赦日祭改
            //        break;
            //}
        }


        //大甲鎮瀾宮點燈
        protected int addapplicantID_da_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 3;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_da_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            //if (Applicant.ApplicantID_Lights_da > 0)
            //{
            //    aid = Applicant.ApplicantID_Lights_da;
            //}
            //else
            //{
            //}
            aid = objLightDAC.addapplicantinfo_lights_da(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);

            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_da(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_da(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_da(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        int status = (int)dtCharge.Rows[0]["Status"];
                        if (status == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_da(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_da_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_da(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType, ref status))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //新港奉天宮點燈
        protected int addapplicantID_h_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 4;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_h_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_h(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_h(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, Zodiac, 
                                    sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_h(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_h(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_h(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_h_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_h(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //北港武德宮點燈
        protected int addapplicantID_wu_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 6;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_wu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_wu(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_wu(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                    Zodiac, sBirth, "", "", count, addr, city, region, zipCode, "", Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_wu(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_wu(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_wu(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_wu_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_wu(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //西螺福興宮點燈
        protected int addapplicantID_Fu_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 8;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_Fu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_Fu(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_Fu(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_Fu(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_Fu(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_Fu(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_Fu_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_Fu(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //台南正宮鹿耳門聖母廟點燈
        protected int addapplicantID_Luer_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 10;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_Luer_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_Luer(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }
                                string petName = item2["petName"] != null ? item2["petName"].ToString() : "";                                                   //寵物姓名
                                string petType = item2["petBreed"] != null ? item2["petBreed"].ToString() : "無";                                               //寵物品種

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_Luer(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, "", petName, petType, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_Luer(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_Luer(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_Luer(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_Luer_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_Luer(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //桃園威天宮點燈
        protected int addapplicantID_ty_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 14;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_ty_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_ty(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_ty(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_ty(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_ty(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_ty(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_ty_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = lightslist.Length > 10 ? "" : msg;

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_ty(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //桃園威天宮孝親祈福點燈
        protected int addapplicantID_ty_Lights_mom(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, string appBirth, string appLeapMonth, string appBirthTime, string appsBirth, string appEmail, JArray itemsInfo, string Tid,
            string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 14;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_ty_mom_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            string AppBirth = string.Empty;
            string AppsBirth = string.Empty;
            string appbirth = appBirth;
            string appsbirth = appsBirth;
            string appbirthMonth = "0";
            string appage = "0";
            string appZodiac = string.Empty;

            GetBirthInfo_FET(appbirth, appsbirth, ref AppBirth, ref AppsBirth, ref appbirthMonth, ref appage, ref appZodiac);

            appbirthMonth = CheckedDateZero(appbirthMonth, 1);

            aid = objLightDAC.addapplicantinfo_lights_ty_mom(appName, appMobile, AppBirth, appLeapMonth, appBirthTime, appbirthMonth, appage, appZodiac, AppsBirth, total,
                appEmail, appZipCode, appCity, appRegion, appAddr, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填

                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱

                            string Birth = string.Empty;
                            string sBirth = string.Empty;
                            string birth = lunarBirthday;
                            string sbirth = birthday;
                            string birthMonth = "0";
                            string age = "0";
                            string Zodiac = string.Empty;

                            GetBirthInfo_FET(birth, sbirth, ref Birth, ref sBirth, ref birthMonth, ref age, ref Zodiac);

                            birthMonth = CheckedDateZero(birthMonth, 1);

                            LightsID = objLightDAC.addLights_ty_mom(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, sBirth, email, 1, "", addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_ty_mom(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_ty_mom(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = 21;

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_ty_mom_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_ty_mom(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //斗六五路財神宮
        protected int addapplicantID_Fw_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 15;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_Fw_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_Fw(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }
                                string petName = item2["petName"] != null ? item2["petName"].ToString() : "";                                                   //寵物姓名
                                string petType = item2["petBreed"] != null ? item2["petBreed"].ToString() : "無";                                               //寵物品種

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_Fw(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, petName, petType, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_Fw(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_Fw(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_Fw(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_Fw_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_Fw(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //台東東海龍門天聖宮點燈
        protected int addapplicantID_dh_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 16;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_dh_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_dh(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_dh(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_dh(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_dh(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_dh(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_dh_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_dh(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //鹿港城隍廟
        protected int addapplicantID_Lk_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID, 
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 21;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_Lk_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            if (sendback == "N")
            {
                sendback = "Y";
                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        reName = prayedPerson[0]["Name"] != null ? prayedPerson[0]["Name"].ToString() : appName;
                        reMobile = prayedPerson[0]["msisdn"] != null ? prayedPerson[0]["msisdn"].ToString() : appMobile;
                        appCity = prayedPerson[0]["city"] != null ? prayedPerson[0]["city"].ToString() : "";
                        appRegion = prayedPerson[0]["region"] != null ? prayedPerson[0]["region"].ToString() : "";
                        appAddr = prayedPerson[0]["Name"] != null ? prayedPerson[0]["Name"].ToString() : "";
                        appZipCode = prayedPerson[0]["Name"] != null ? prayedPerson[0]["Name"].ToString() : "";
                        break;
                    }
                }
            }
            else
            {
                reMobile = appMobile;
            }

            aid = objLightDAC.addapplicantinfo_lights_Lk(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_Lk(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                    Zodiac, sBirth, "", "", count, addr, city, region, zipCode, "N", "", "", "", "", "", "", "0", Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_Lk(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_Lk(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_Lk(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_Lk_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_Lk(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //玉敕大樹朝天宮
        protected int addapplicantID_ma_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID,
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 29;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_ma_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_ma(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                                string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                                string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                                string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                                string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                                string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                                string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                                string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                                string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                                string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                                string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                                string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                                string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                                string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                                string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                                string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                                string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                                string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                if (lyear != "" && month != "" && day != "")
                                {
                                    Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                }
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_ma(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_ma(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber,
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_ma(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_ma(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_ma_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_ma(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //進寶財神廟
        protected int addapplicantID_jb_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID,
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 29;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_jb_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_jb(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                                string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                                string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                                string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                                string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                                string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                                string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                                string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                                string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                                string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                                string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                                string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                                string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                                string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                                string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                                string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                                string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                                string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                                string petName = item2["petName"] != null ? item2["petName"].ToString() : "";                                                   //寵物姓名
                                string petType = item2["petBreed"] != null ? item2["petBreed"].ToString() : "無";                                               //寵物品種
                                string petSex = item2["petGender"] != null ? item2["petGender"].ToString() : "";                                                //寵物性別
                                string petDate = item2["petDate"] != null ? item2["petDate"].ToString() : "";                                                   //寵物生日


                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string petBirth = string.Empty;
                                string petyear = string.Empty;
                                string petmonth = string.Empty;
                                string petday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                string petbirth = petDate;
                                if (petbirth.Length == 7)
                                {
                                    petyear = petbirth.Substring(0, 3);
                                    year = (int.Parse(petbirth.Substring(0, 3)) + 1911).ToString();
                                    petmonth = petbirth.Substring(3, 2);
                                    petday = petbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }


                                int l = 0, s = 0, p = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);
                                int.TryParse(petyear, out p);

                                if (lyear != "" && month != "" && day != "")
                                {
                                    Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                }
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }
                                if (petyear != "" && petmonth != "" && petday != "")
                                {
                                    petBirth = "民國" + (p > 0 ? p.ToString() : petyear) + "年" + petmonth + "月" + petday + "日";
                                }

                                LightsID = objLightDAC.addLights_jb(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, petName, petType, petSex, petBirth, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_jb(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, 
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_jb(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_jb(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_jb_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_jb(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //台灣道教總廟無極三清總道院
        protected int addapplicantID_wjsan_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID,
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 29;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_wjsan_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_wjsan(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                                string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                                string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                                string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                                string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                                string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                                string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                                string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                                string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                                string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                                string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                                string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                                string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                                string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                                string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                                string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                                string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                                string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                if (lyear != "" && month != "" && day != "")
                                {
                                    Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                }
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_wjsan(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_wjsan(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber,
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_wjsan(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_wjsan(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_wjsan_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_wjsan(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //桃園龍德宮
        protected int addapplicantID_ld_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID,
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 32;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_ld_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_ld(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                                string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                                string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                                string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                                string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                                string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                                string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                                string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                                string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                                string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                                string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                                string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                                string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                                string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                                string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                                string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                                string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                                string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                if (lyear != "" && month != "" && day != "")
                                {
                                    Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                }
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_ld(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_ld(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber,
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_ld(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_ld(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_ld_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_ld(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //基隆悟玄宮
        protected int addapplicantID_wh_Lights(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Lightslist, ref int LightsID,
            ref string OrderID)
        {
            int aid = 0;
            int adminID = 34;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lights_wh_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_lights_wh(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    if (productCode == item["productCode"].ToString())
                    {
                        //int.TryParse(item["qty"].ToString(), out count);
                        count = 1;
                        int.TryParse(item["unitPrice"].ToString(), out cost);

                        DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                        if (dtTempleCodeInfo.Rows.Count > 0)
                        {
                            string LightsString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                            string LightsType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                            JArray prayedPerson = (JArray)item["prayedPerson"];
                            foreach (var item2 in prayedPerson)
                            {
                                string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                                //string mobile = appMobile;
                                string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                                string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                                string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                                string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                                string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                                string region = string.Empty;                                                                                                   //地區, 國內地址必填
                                string addr = item2["address"].ToString();                                                                                      //部分地址
                                string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                                if (oversea == "1")
                                {
                                    city = item2["city"].ToString();
                                    region = item2["region"].ToString();
                                }
                                else
                                {
                                    if (item2["city"] != null)
                                    {
                                        city = item2["city"].ToString();
                                    }
                                    if (item2["region"] != null)
                                    {
                                        region = item2["region"].ToString();
                                    }
                                }

                                string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                                string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                                string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                                string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                                string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                                string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                                string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                                string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                                string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                                string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                                string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                                string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                                string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                                string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                                string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                                string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                                string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                                string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                                string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                                string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                                string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                                string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                                string Birth = string.Empty;
                                string birthMonth = string.Empty;
                                string age = string.Empty;
                                string Zodiac = string.Empty;
                                string lyear = string.Empty;
                                string year = string.Empty;
                                string month = string.Empty;
                                string day = string.Empty;

                                string sBirth = string.Empty;
                                string syear = string.Empty;
                                string smonth = string.Empty;
                                string sday = string.Empty;

                                string birth = lunarBirthday;
                                if (birth.Length == 7)
                                {
                                    lyear = birth.Substring(0, 3);
                                    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                    month = birthMonth = birth.Substring(3, 2);
                                    day = birth.Substring(5, 2);

                                    string b = year + "-" + month + "-" + day;
                                    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                    DateTime lunarBirth;
                                    DateTime solorBirth;
                                    if (DateTime.TryParse(b, out lunarBirth))
                                    {
                                        //age = GetAge(DateTime.Parse(b), dtNow);

                                        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                    }
                                    else
                                    {
                                        birth = birthday;
                                        if (birth.Length == 7)
                                        {
                                            syear = birth.Substring(0, 3);
                                            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                            smonth = birthMonth = birth.Substring(3, 2);
                                            sday = birth.Substring(5, 2);

                                            b = year + "-" + smonth + "-" + sday;
                                            LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                            if (DateTime.TryParse(b, out solorBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(b), dtNow);

                                                age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                            }
                                        }
                                    }
                                }

                                string sbirth = birthday;
                                if (sbirth.Length == 7)
                                {
                                    syear = sbirth.Substring(0, 3);
                                    year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                    smonth = sbirth.Substring(3, 2);
                                    sday = sbirth.Substring(5, 2);

                                    //b = year + "-" + smonth + "-" + sday;
                                    //if (DateTime.TryParse(b, out solorBirth))
                                    //{
                                    //    //age = GetAge(DateTime.Parse(b), dtNow);

                                    //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                    //}
                                }

                                int l = 0, s = 0;
                                int.TryParse(lyear, out l);
                                int.TryParse(syear, out s);

                                if (lyear != "" && month != "" && day != "")
                                {
                                    Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                                }
                                if (syear != "" && smonth != "" && sday != "")
                                {
                                    sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                                }

                                LightsID = objLightDAC.addLights_wh(aid, name, mobile, gender, LightsType, LightsString, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                    Zodiac, sBirth, "", count, addr, city, region, zipCode, Year);
                            }
                        }
                    }
                }

                if (LightsID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] lightslist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Lights_wh(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber,
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lights_wh(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int LightsType = objDatabaseHelper.GetLightsType_wh(aid, Year);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLights_wh_Info(aid, LightsType, Year, ref msg, ref lightslist, ref Lightslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lights_wh(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }



        //大甲鎮瀾宮普度
        protected int addapplicantID_da_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 3;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_da_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_da(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string DDod = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string DeathAge = "0";

                            string dage = string.Empty;
                            string dlyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;
                            string dyear = string.Empty;
                            string dmonth = string.Empty;
                            string dday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            string dbirth = dLunarBirthday;
                            if (dbirth.Length == 7)
                            {
                                string lyear = dbirth.Substring(0, 3);
                                dlyear = (int.Parse(dbirth.Substring(0, 3)) + 1911).ToString();
                                month = dbirth.Substring(3, 2);
                                day = dbirth.Substring(5, 2);

                                Birth = dlyear + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(dlyear), ref Zodiac);
                                DateTime lBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                }
                                else
                                {
                                    dbirth = dBirthday;
                                    if (dbirth.Length == 7)
                                    {
                                        lyear = dbirth.Substring(0, 3);
                                        month = dbirth.Substring(3, 2);
                                        day = dbirth.Substring(5, 2);
                                    }
                                }

                                if (dBirthType == "0")
                                {
                                    lyear = "前" + lyear;
                                }

                                dbirth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            string ddod = dDoD;
                            if (ddod.Length == 7)
                            {
                                string lyear = ddod.Substring(0, 3);
                                dyear = (int.Parse(ddod.Substring(0, 3)) + 1911).ToString();
                                dmonth = ddod.Substring(3, 2);
                                dday = ddod.Substring(5, 2);

                                DDod = dyear + "-" + dmonth + "-" + dday;

                                if (dDoDType == "0")
                                {
                                    lyear = "前" + lyear;
                                }

                                ddod = "民國" + lyear + "年" + dmonth + "月" + dday + "日";

                                if (Birth != "" && DDod != "")
                                {
                                    int year_i = 0, month_i = 0, day_i = 0, lyear_i = 0, lmonth_i = 0, lday_i = 0;
                                    int.TryParse(dlyear, out year_i);
                                    int.TryParse(month, out month_i);
                                    int.TryParse(day, out day_i);
                                    int.TryParse(dyear, out lyear_i);
                                    int.TryParse(dmonth, out lmonth_i);
                                    int.TryParse(dday, out lday_i);


                                    dage = GetAge(year_i, month_i, day_i, lyear_i, lmonth_i, lday_i).ToString();
                                }
                            }

                            int send = sendback == "Y" ? 1 : 0;
                            string firstname = string.Empty;
                            string deathname = string.Empty;

                            switch (PurdueType)
                            {
                                case "1":
                                    //贊普
                                    break;
                                case "2":
                                    //九玄七祖
                                    firstname = dName;
                                    break;
                                case "3":
                                    //亡者
                                    deathname = dName;
                                    break;
                                case "4":
                                    //地基主
                                    break;
                                case "5":
                                    //冤親債主
                                    name2 = "";
                                    break;
                                case "6":
                                    //嬰靈
                                    firstname = dName;
                                    break;
                            }

                            if (PurdueType != "1")
                            {
                                count = 1;
                            }

                            PurdueID = objLightDAC.addpurdue_da(aid, name, name2, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, 
                                Zodiac, count, addr, city, region, zipCode, send.ToString(), reName, reMobile, appAddr, appCity, appRegion, appZipCode, deathname, dbirth, 
                                dLeapMonth, dBirthTime, ddod, dage, firstname, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_da(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_da(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_da(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_da_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_da(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //新港奉天宮普度
        protected int addapplicantID_h_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string appBirthday, 
            string appLBirthday, string appleapMonth, string appBirthTime, string appEmail, string sendback, string reName, string reMobile, JArray itemsInfo, string Tid, 
            string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            LightDAC objLightDAC = new LightDAC(this);
            int aid = 0;
            int adminID = 4;
            string postURL = "Purdue_h_Index_FETAPI";

            ////取得生日的月份、年齡及生肖
            //GetBirthDetail(appBirth, ref appBirthMonth, ref appAge, ref appZodiac);                                                  //備註

            string aBirth = string.Empty;
            string appbirthMonth = "0";
            string appage = "0";
            string appZodiac = string.Empty;

            string appyear = string.Empty;
            string appmonth = string.Empty;
            string appday = string.Empty;

            string appbirth = appLBirthday;
            if (appbirth.Length == 7)
            {
                string lyear = appbirth.Substring(0, 3);
                appyear = (int.Parse(appbirth.Substring(0, 3)) + 1911).ToString();
                appmonth = appbirthMonth = appbirth.Substring(3, 2);
                appday = appbirth.Substring(5, 2);

                aBirth = appyear + "-" + appmonth + "-" + appday;
                LunarSolarConverter.shuxiang(int.Parse(appyear), ref appZodiac);
                DateTime lBirth;
                DateTime sBirth;
                if (DateTime.TryParse(aBirth, out lBirth))
                {
                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                    appage = GetAge(int.Parse(appyear), int.Parse(appmonth), int.Parse(appday)).ToString();
                }
                else
                {
                    appbirth = appBirthday;
                    if (appbirth.Length == 7)
                    {
                        lyear = appbirth.Substring(0, 3);
                        appyear = (int.Parse(appbirth.Substring(0, 3)) + 1911).ToString();
                        appmonth = appbirthMonth = appbirth.Substring(3, 2);
                        appday = appbirth.Substring(5, 2);

                        aBirth = appyear + "-" + appmonth + "-" + appday;
                        if (DateTime.TryParse(aBirth, out sBirth))
                        {
                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                            appage = GetAge(int.Parse(appyear), int.Parse(appmonth), int.Parse(appday)).ToString();
                        }
                    }
                }

                appbirth = "民國" + lyear + "年" + appmonth + "月" + appday + "日";
            }

            aid = objLightDAC.addapplicantinfo_purdue_h(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, appbirth, appleapMonth, appBirthTime, appbirthMonth, appage, 
                appZodiac, appEmail, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            string Creditor = "0";
                            string Ancestor = "0";
                            string AncestorLastname = string.Empty;
                            string AncestorAddress = string.Empty;
                            string AncestorAddr = string.Empty;
                            string AncestorCounty = string.Empty;
                            string AncestorDist = string.Empty;
                            string AncestorZipCode = "0";

                            string Deceased = "0";
                            string DeceasedName = string.Empty;
                            string DeceasedAddress = string.Empty;
                            string DeceasedAddr = string.Empty;
                            string DeceasedCounty = string.Empty;
                            string DeceasedDist = string.Empty;
                            string DeceasedZipCode = "0";

                            switch (PurdueType)
                            {
                                case "1":
                                    //贊普
                                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                                    count = 1;
                                    break;
                                case "2":
                                    //九玄七組
                                    Creditor = "0";
                                    Ancestor = "1";
                                    AncestorLastname = dName;
                                    AncestorAddr = dAddr;
                                    AncestorCounty = dCity;
                                    AncestorDist = dRegion;
                                    AncestorZipCode = dZipCode;
                                    AncestorAddress = dCity + dRegion + dAddr;
                                    count = 0;
                                    break;
                                case "3":
                                    //功德迴向往生者
                                    Creditor = "0";
                                    Deceased = "1";
                                    DeceasedName = dName;
                                    DeceasedAddr = dAddr;
                                    DeceasedCounty = dCity;
                                    DeceasedDist = dRegion;
                                    DeceasedZipCode = dZipCode;
                                    DeceasedAddress = dCity + dRegion + dAddr;
                                    count = 0;
                                    break;
                                case "5":
                                    //冤親債主
                                    Creditor = "1";
                                    Ancestor = "0";
                                    AncestorLastname = "";
                                    AncestorAddr = "";
                                    AncestorCounty = "";
                                    AncestorDist = "";
                                    AncestorZipCode = "0";
                                    AncestorAddress = "";
                                    Deceased = "0";
                                    DeceasedName = "";
                                    DeceasedAddr = "";
                                    DeceasedCounty = "";
                                    DeceasedDist = "";
                                    DeceasedZipCode = "0";
                                    DeceasedAddress = "";
                                    count = 0;
                                    break;
                            }

                            PurdueID = objLightDAC.addpurdue_h(aid, "4", "0", "", "0", "0", Creditor, Ancestor, AncestorLastname, AncestorAddress, AncestorCounty, AncestorDist, AncestorAddr, 
                                AncestorZipCode, Deceased, DeceasedName, DeceasedAddress, DeceasedCounty, DeceasedDist, DeceasedAddr, DeceasedZipCode, "0", "0", "0", "0", "0", "0", 
                                PurdueType, PurdueString, name, birth, leapMonth, birthTime, birthMonth, age, Zodiac, oversea, city, region, addr, zipCode, count, 0, 0, remark, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_h(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_h(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_h(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_h_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_h(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //北港武德宮普度
        protected int addapplicantID_wu_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 6;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_wu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_wu(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            PurdueID = objLightDAC.addpurdue_wu(aid, name, mobile, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac, gender, 
                                homeNum, email, count.ToString(), addr, city, region, zipCode, remark, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_wu(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_wu(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_wu(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_wu_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_wu(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //西螺福興宮普度
        protected int addapplicantID_Fu_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 8;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_Fu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_Fu(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            string Offering = PurdueType == "1" ? count.ToString() : additionalOfferingQty;
                            string firstname = string.Empty;
                            string deathname = string.Empty;

                            switch (PurdueType)
                            {
                                case "1":
                                    //贊普
                                    break;
                                case "2":
                                    //九玄七祖
                                    firstname = dName;
                                    addr = dAddr;
                                    city = dCity;
                                    region = dRegion;
                                    zipCode = dZipCode;
                                    break;
                                case "3":
                                    //亡者
                                    deathname = dName;
                                    addr = dAddr;
                                    city = dCity;
                                    region = dRegion;
                                    zipCode = dZipCode;
                                    break;
                                case "4":
                                    //地基主
                                    break;
                                case "5":
                                    //冤親債主
                                    deathname = dName;
                                    addr = dAddr;
                                    city = dCity;
                                    region = dRegion;
                                    zipCode = dZipCode;
                                    break;
                                case "6":
                                    //嬰靈
                                    deathname = dName;
                                    break;
                                case "12":
                                    //動物靈
                                    deathname = dName;
                                    break;
                            }

                            PurdueID = objLightDAC.addpurdue_Fu(aid, name, name2, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                Offering, jossMoneyQty, addr, city, region, zipCode, firstname, deathname, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_Fu(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_Fu(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_Fu(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_Fu_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_Fu(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //台南正統鹿耳門聖母廟普度
        protected int addapplicantID_Luer_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 10;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_Luer_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_Luer(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            PurdueID = objLightDAC.addpurdue_Luer(aid, name, name2, mobile, gender, PurdueType, PurdueString, email, oversea, birth, leapMonth, birthTime, birthMonth, 
                                age, Zodiac, count.ToString(), addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_Luer(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_Luer(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_Luer(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_Luer_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_Luer(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //桃園威天宮普度
        protected int addapplicantID_ty_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 14;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_ty_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_ty(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            string purdueString = PurdueString;
                            string purdueItem = string.Empty;
                            string firstName = string.Empty;
                            int count_3rice = 0, count_50rice = 0;

                            switch (PurdueString)
                            {
                                case "O氏歷代祖先":
                                    //count = 1;
                                    purdueString = "光明功德主";
                                    purdueItem = "超薦大牌-" + PurdueString;

                                    int.TryParse(offeringQty, out count);

                                    if (dName != "")
                                    {
                                        firstName = dName;
                                    }

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, PurdueType, purdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);
                                    break;
                                case "累劫冤親債主":
                                    //count = 1;
                                    purdueString = "光明功德主";
                                    purdueItem = "超薦大牌-" + PurdueString;

                                    int.TryParse(offeringQty, out count);

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, PurdueType, purdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);
                                    break;
                                case "贊普":

                                    int.TryParse(offeringQty, out count);

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, PurdueType, purdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);
                                    break;
                                case "白米50台斤":

                                    int.TryParse(offeringQty, out count);

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, "1", "贊普", oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);

                                    int.TryParse(offeringQty, out count_50rice);
                                    count = 0;

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, PurdueType, purdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);
                                    break;
                                case "白米3台斤":

                                    int.TryParse(offeringQty, out count);

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, "1", "贊普", oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);

                                    int.TryParse(offeringQty, out count_3rice);
                                    count = 0;

                                    PurdueID = objLightDAC.addpurdue_ty(aid, name, mobile, gender, PurdueType, purdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                        count, count_3rice, count_50rice, addr, city, region, zipCode, remark, purdueItem, "", firstName, "", "", "", "", dAddr, dCity, dRegion, dZipCode,
                                        "", "", "", "", "", "", "", "", "", "", "0", Year);
                                    break;
                            }

                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_ty(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_ty(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_ty(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_ty_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_ty(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //斗六五路財神宮普度
        protected int addapplicantID_Fw_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 15;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_Fw_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_Fw(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            PurdueID = objLightDAC.addpurdue_Fw(aid, name, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                1, 0, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_Fw(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_Fw(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_Fw(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_Fw_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_Fw(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //台東東海龍門天聖宮普度
        protected int addapplicantID_dh_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 16;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_dh_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_dh(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            string firstName = string.Empty;
                            string deathName = string.Empty;
                            string deathday = string.Empty;
                            string deathBirth = string.Empty;
                            string dBirth = string.Empty;
                            string dbirthMonth = string.Empty;
                            string dage = string.Empty;
                            string dZodiac = string.Empty;

                            string dyear = string.Empty;
                            string dmonth = string.Empty;
                            string dday = string.Empty;

                            if (dName != "")
                            {
                                switch (PurdueType)
                                {
                                    case "2":
                                        count = 1;
                                        firstName = dName;
                                        break;
                                    case "3":
                                        count = 1;
                                        deathName = dName;
                                        deathday = dDoD;

                                        if (deathday.Length == 7)
                                        {
                                            string lyear = deathday.Substring(0, 3);
                                            year = (int.Parse(deathday.Substring(0, 3)) + 1911).ToString();
                                            month = deathday.Substring(3, 2);
                                            day = deathday.Substring(5, 2);

                                            if (dDoDType == "0")
                                            {
                                                lyear = "前" + lyear;
                                            }

                                            deathday = "民國" + lyear + "年" + month + "月" + day + "日";
                                        }
                                        break;
                                    case "5":
                                        count = 1;
                                        deathName = dName;
                                        deathBirth = dLunarBirthday;
                                        if (deathBirth.Length == 7)
                                        {
                                            string lyear = deathBirth.Substring(0, 3);
                                            dyear = (int.Parse(deathBirth.Substring(0, 3)) + 1911).ToString();
                                            dmonth = dbirthMonth = deathBirth.Substring(3, 2);
                                            dday = deathBirth.Substring(5, 2);

                                            dBirth = dyear + "-" + dmonth + "-" + dday;
                                            LunarSolarConverter.shuxiang(int.Parse(dyear), ref dZodiac);
                                            DateTime lBirth;
                                            DateTime sBirth;
                                            if (DateTime.TryParse(dBirth, out lBirth))
                                            {
                                                //age = GetAge(DateTime.Parse(dBirth), dtNow);

                                                dage = GetAge(int.Parse(year), int.Parse(month), int.Parse(day), int.Parse(dyear), int.Parse(dmonth), int.Parse(dday)).ToString();
                                            }
                                            else
                                            {
                                                deathBirth = dBirthday;
                                                if (deathBirth.Length == 7)
                                                {
                                                    lyear = deathBirth.Substring(0, 3);
                                                    dyear = (int.Parse(deathBirth.Substring(0, 3)) + 1911).ToString();
                                                    dmonth = dbirthMonth = deathBirth.Substring(3, 2);
                                                    dday = deathBirth.Substring(5, 2);

                                                    dBirth = dyear + "-" + dmonth + "-" + dday;
                                                    if (DateTime.TryParse(dBirth, out sBirth))
                                                    {
                                                        //age = GetAge(DateTime.Parse(dBirth), dtNow);

                                                        dage = GetAge(int.Parse(year), int.Parse(month), int.Parse(day), int.Parse(dyear), int.Parse(dmonth), int.Parse(dday)).ToString();
                                                    }
                                                }
                                            }

                                            if (dBirthType == "0")
                                            {
                                                lyear = "前" + lyear;
                                            }

                                            deathBirth = "民國" + lyear + "年" + dmonth + "月" + dday + "日";
                                        }
                                        break;
                                }
                            }

                            PurdueID = objLightDAC.addpurdue_dh(aid, name, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                count, addr, city, region, zipCode, deathName, deathday, deathBirth, dLeapMonth, dBirthTime, dbirthMonth, dage, dZodiac, firstName, dAddr, dCity, 
                                dRegion, dZipCode, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_dh(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_dh(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_dh(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_dh_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_dh(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //鹿港城隍廟普度
        protected int addapplicantID_Lk_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 21;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_Lk_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_Lk(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            PurdueID = objLightDAC.addpurdue_Lk(aid, name, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                homeNum, count, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_Lk(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_Lk(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_Lk(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_Lk_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_Lk(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //玉敕大樹朝天宮普度
        protected int addapplicantID_ma_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 3;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_ma_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_ma(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            int send = sendback == "Y" ? 1 : 0;

                            PurdueID = objLightDAC.addpurdue_ma(aid, name, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age, Zodiac,
                                count, email, addr, city, region, zipCode, dName, remark, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_ma(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_ma(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_ma(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_ma_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_ma(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //鎮瀾買足普度
        protected int addapplicantID_mazu_Purdue(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Purduelist, ref int PurdueID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 30;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Purdue_mazu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_purdue_mazu(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);                                                                                   //單價
                    string productCode = item["productCode"].ToString();                                                                                    //產品編號(業者提供)

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string PurdueString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string PurdueType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"] != null ? item2["address"].ToString() : "";                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"] != null ? item2["city"].ToString() : "";
                                region = item2["region"] != null ? item2["region"].ToString() : "";
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string additionalOfferingQty = item2["additionalOfferingQty"] != null ? item2["additionalOfferingQty"].ToString() : "0";        //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string DDod = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string DeathAge = "0";

                            string dage = string.Empty;
                            string dlyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;
                            string dyear = string.Empty;
                            string dmonth = string.Empty;
                            string dday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            //if (PurdueType != "1")
                            //{
                            //    count = 1;
                            //}

                            PurdueID = objLightDAC.addpurdue_mazu(aid, name, mobile, gender, PurdueType, PurdueString, oversea, birth, leapMonth, birthTime, birthMonth, age,
                                Zodiac, count, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (PurdueID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;
                    string[] purduelist = new string[0];

                    long id = objDatabaseHelper.AddChargeLog_Purdue_mazu(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Purdue_mazu(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            int PurdueType = objDatabaseHelper.GetPurdueType_mazu(aid, Year);

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdatePurdue_mazu_Info(aid, PurdueType, Year, ref purduelist, ref Purduelist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < purduelist.Length; i++)
                            {
                                msg += purduelist[i];
                                if (i < purduelist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Purdue_mazu(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }



        //新港奉天宮文創小販部
        protected int addapplicantID_h_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 5;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_h_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            int count = 0;
            int cost = 0;

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, dtNow.Year.ToString());
            if (aid > 0)
            {
                foreach (var item in itemsInfo)
                {
                    int.TryParse(item["qty"].ToString(), out count);
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                        string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                        string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                        ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                    }
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, 
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_h(aid, Year);

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + total + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }
        
        //西螺福興宮文創小販部
        protected int addapplicantID_Fu_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 20;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_Fu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            int count = 0;
            int cost = 0;

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, dtNow.Year.ToString());
            if (aid > 0)
            {
                foreach (var item in itemsInfo)
                {
                    int.TryParse(item["qty"].ToString(), out count);
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                        string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                        string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                        ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                    }
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, 
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_Fu(aid, Year);

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //流金富貴文創小販部
        protected int addapplicantID_Fg_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 22;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_Fg_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            int count = 0;
            int cost = 0;

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, dtNow.Year.ToString());
            if (aid > 0)
            {
                foreach (var item in itemsInfo)
                {
                    int.TryParse(item["qty"].ToString(), out count);
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                        string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                        string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                        ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                    }
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, 
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_h(aid, dtNow.Year.ToString());

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //財神小舖文創小販部
        protected int addapplicantID_god_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 28;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_god_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            int count = 0;
            int cost = 0;

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, dtNow.Year.ToString());
            if (aid > 0)
            {
                foreach (var item in itemsInfo)
                {
                    int.TryParse(item["qty"].ToString(), out count);
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                        string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                        string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                        ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                    }
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, 
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_Fu(aid, Year);

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //新港奉天宮文創小販部
        protected int addapplicantID_h_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string count, string cost, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, 
            ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 5;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_h_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, 
                dtNow.Year.ToString());
            if (aid > 0)
            {
                DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                if (dtTempleCodeInfo.Rows.Count > 0)
                {
                    string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                    string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                    string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                    string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                    ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost, count, dtNow.Year.ToString());
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress,
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_h(aid, Year);

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + total + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //西螺福興宮文創小販部
        protected int addapplicantID_Fu_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string count, string cost, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Productlist,
            ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 20;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_Fu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, 
                dtNow.Year.ToString());
            if (aid > 0)
            {
                DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                if (dtTempleCodeInfo.Rows.Count > 0)
                {
                    string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                    string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                    string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                    string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                    ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress,
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_Fu(aid, Year);

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //流金富貴文創小販部
        protected int addapplicantID_Fg_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string count, string cost, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, 
            ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 22;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_Fg_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, dtNow.Year.ToString());
            if (aid > 0)
            {
                DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                if (dtTempleCodeInfo.Rows.Count > 0)
                {
                    string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                    string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                    string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                    string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                    ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress,
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_h(aid, dtNow.Year.ToString());

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //財神小舖文創小販部
        protected int addapplicantID_god_Product(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string count, string cost, string productCode, string Tid, string fetOrderNumber, string Year, ref string[] Productlist, 
            ref int ProductInfoID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 28;
            LightDAC objLightDAC = new LightDAC(this);
            ProductDAC objProductDAC = new ProductDAC(this);
            string postURL = "Product_god_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objProductDAC.addapplicantinfo_Product(adminID.ToString(), appName, appMobile, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, total, postURL, dtNow.Year.ToString());
            if (aid > 0)
            {
                DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                if (dtTempleCodeInfo.Rows.Count > 0)
                {
                    string ProductString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                    string ProductID = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();
                    string typeID = dtTempleCodeInfo.Rows[0]["ItemTypeID"].ToString();
                    string a = dtTempleCodeInfo.Rows[0]["AdminID"].ToString();

                    ProductInfoID = objProductDAC.addproductinfo(a, aid, 0, 0, int.Parse(typeID), ProductID, cost.ToString(), count.ToString(), dtNow.Year.ToString());
                }
            }

            if (ProductInfoID > 0 && aid > 0)
            {
                BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                string CallbackLog = Tid + "," + fetOrderNumber;
                string[] productlist = new string[0];

                long id = objDatabaseHelper.AddChargeLog_Product(OrderID, adminID.ToString(), aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress,
                    dtNow.Year.ToString());

                DataTable dtCharge = objDatabaseHelper.GetChargeLog_Product(OrderID, dtNow.Year.ToString());
                if (dtCharge.Rows.Count > 0)
                {
                    if ((int)dtCharge.Rows[0]["Status"] == 0)
                    {
                        //int LightsType = objDatabaseHelper.GetType_Fu(aid, Year);

                        //更新點燈資料表並取得訂單編號
                        objDatabaseHelper.UpdateProductInfo(aid, adminID, dtNow.Year.ToString(), ref productlist, ref Productlist);
                        objDatabaseHelper.UpdateCount2Product(aid, dtNow.Year.ToString()); //更新購買數量至商品表or商品類別表

                        string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                        for (int i = 0; i < productlist.Length; i++)
                        {
                            msg += productlist[i];
                            if (i < productlist.Length - 1)
                            {
                                msg += ",";
                            }
                        }

                        msg += "。客服電話：04-36092299。";


                        //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                        //mobile = "0903002568";

                        SMSHepler objSMSHepler = new SMSHepler();

                        //更新流水付費表資訊(付費成功)
                        if (!objDatabaseHelper.UpdateChargeLog_Product(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, dtNow.Year.ToString()))
                        {
                            string encrypt = string.Empty;

                            //JSON寫入到檔案
                            using (StringWriter sw = new StringWriter())
                            {
                                using (JsonTextWriter writer = new JsonTextWriter(sw))
                                {
                                    //建立物件
                                    writer.WriteStartObject();

                                    //物件名稱
                                    writer.WritePropertyName("detail");

                                    using (StringWriter sw2 = new StringWriter())
                                    {
                                        using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                        {
                                            //建立物件
                                            writer2.WriteStartObject();

                                            writer2.WritePropertyName("orderMsg");
                                            writer2.WriteValue("fail");

                                            writer2.WritePropertyName("orderStatus");
                                            writer2.WriteValue("1003");

                                            writer2.WriteEndObject();

                                            encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                        }
                                    }

                                    writer.WriteValue(encrypt);

                                    writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                    writer.WriteEndObject();

                                    writer.Flush();
                                    writer.Close();
                                    sw.Flush();
                                    sw.Close();

                                    //輸出結果
                                    Response.Write(sw.ToString());

                                    SaveRequestLog(Request.Url + sw.ToString());
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }



        //北港武德宮-下元補庫
        protected int addapplicantID_wu_Supplies(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 6;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_wu_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_wu(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, 
                adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            int.TryParse(offeringQty, out count);

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);

                                //b = year + "-" + smonth + "-" + sday;
                                //if (DateTime.TryParse(b, out solorBirth))
                                //{
                                //    //age = GetAge(DateTime.Parse(b), dtNow);

                                //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                //}
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }

                            SuppliesID = objLightDAC.addsupplies_wu(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, Birth, leapMonth, birthTime, birthMonth, age, 
                                Zodiac, sBirth, homeNum, email, addr, city, region, zipCode, remark, count.ToString(), Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_wu(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, 
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_wu(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_wu_Info(aid, Year, ref Supplieslist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < Supplieslist.Length; i++)
                            {
                                msg += Supplieslist[i];
                                if (i < Supplieslist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies_wu(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //北港武德宮-呈疏補庫(天官武財神聖誕補財庫)
        protected int addapplicantID_wu_Supplies2(string appName, string appMobile, string total, string appEmail, string appCity, string appRegion, string appAddr, 
            string appZipCode, string sendback, string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, 
            ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 6;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_wu2_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_wu2(appName, appMobile, total, appEmail, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            int.TryParse(offeringQty, out count);

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }

                            SuppliesID = objLightDAC.addsupplies_wu2(aid, name, mobile, SuppliesType, SuppliesString, gender, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                Zodiac, sBirth, homeNum, email, addr, city, region, zipCode, remark, count.ToString(), Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_wu2(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_wu2(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_wu_Info2(aid, Year, ref msg, ref Supplieslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (!objDatabaseHelper.UpdateChargeLog_Supplies_wu2(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //北港武德宮-企業補財庫
        protected int addapplicantID_wu_Supplies3(string appName, string appMobile, string total, string appEmail, string appCity, string appRegion, string appAddr, 
            string appZipCode, string sendback, string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, 
            ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 6;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_wu3_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_wu3(appName, appMobile, total, appEmail, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            int.TryParse(offeringQty, out count);

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }

                            SuppliesID = objLightDAC.addsupplies_wu3(aid, name, mobile, SuppliesType, SuppliesString, gender, oversea, Birth, leapMonth, birthTime, birthMonth, age,
                                Zodiac, sBirth, homeNum, email, addr, city, region, zipCode, remark, count.ToString(), Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_wu3(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_wu3(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_wu_Info3(aid, Year, ref msg, ref Supplieslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (!objDatabaseHelper.UpdateChargeLog_Supplies_wu3(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //桃園威天宮-天赦日招財補運
        protected int addapplicantID_ty_Supplies(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, string appBirth, string appLeapMonth, string appBirthTime, string appsBirth, string appEmail, JArray itemsInfo, string Tid, 
            string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 14;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_ty_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            string AppBirth = string.Empty;
            string AppsBirth = string.Empty;
            string appbirth = appBirth;
            string appsbirth = appsBirth;
            string appbirthMonth = "0";
            string appage = "0";
            string appZodiac = string.Empty;

            GetBirthInfo_FET(appbirth, appsbirth, ref AppBirth, ref AppsBirth, ref appbirthMonth, ref appage, ref appZodiac);

            appbirthMonth = CheckedDateZero(appbirthMonth, 1);

            aid = objLightDAC.addapplicantinfo_Supplies_ty(appName, appMobile, AppBirth, appLeapMonth, appBirthTime, appbirthMonth, appage, appZodiac, AppsBirth, total,
                appEmail, appZipCode, appCity, appRegion, appAddr, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填

                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱

                            string Birth = string.Empty;
                            string sBirth = string.Empty;
                            string birth = lunarBirthday;
                            string sbirth = birthday;
                            string birthMonth = "0";
                            string age = "0";
                            string Zodiac = string.Empty;

                            GetBirthInfo_FET(birth, sbirth, ref Birth, ref sBirth, ref birthMonth, ref age, ref Zodiac);

                            birthMonth = CheckedDateZero(birthMonth, 1);

                            SuppliesID = objLightDAC.addSupplies_ty(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, Birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, sBirth, email, 1, "", addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_ty(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_ty(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_ty_Info(aid, Year, ref msg, ref Supplieslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies_ty(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //玉敕大樹朝天宮-天赦日招財補運
        protected int addapplicantID_ma_Supplies(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 23;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_ma_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_ma(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱

                            string Birth = string.Empty;
                            string sBirth = string.Empty;
                            string birth = lunarBirthday;
                            string sbirth = birthday;
                            string birthMonth = "0";
                            string age = "0";
                            string Zodiac = string.Empty;

                            GetBirthInfo_FET(birth, sbirth, ref Birth, ref sBirth, ref birthMonth, ref age, ref Zodiac);

                            birthMonth = CheckedDateZero(birthMonth, 1);

                            SuppliesID = objLightDAC.addSupplies_ma(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, Birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, sBirth, email, homeNum, 1, "", addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_ma(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_ma(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_ma_Info(aid, Year, ref Supplieslist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < Supplieslist.Length; i++)
                            {
                                msg += Supplieslist[i];
                                if (i < Supplieslist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies_ma(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //進寶財神廟-天赦日祭改
        protected int addapplicantID_jb_Supplies(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 29;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_jb_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_jb(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            SuppliesID = objLightDAC.addSupplies_jb(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, birth, leapMonth, birthTime, birthMonth, 
                                age, Zodiac, 1, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_jb(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_jb(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_jb_Info(aid, Year, ref Supplieslist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < Supplieslist.Length; i++)
                            {
                                msg += Supplieslist[i];
                                if (i < Supplieslist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies_jb(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //進寶財神廟-代燒金紙
        protected int addapplicantID_jb_BPO(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, 
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] BPOlist, ref int BPOID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 29;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "BPO_jb_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_BPO_jb(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string BPOString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string BPOType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填

                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;

                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                string lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                Birth = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lBirth;
                                DateTime sBirth;
                                if (DateTime.TryParse(Birth, out lBirth))
                                {
                                    //age = GetAge(DateTime.Parse(Birth), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        lyear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        month = birthMonth = birth.Substring(3, 2);
                                        day = birth.Substring(5, 2);

                                        Birth = year + "-" + month + "-" + day;
                                        if (DateTime.TryParse(Birth, out sBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(Birth), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                        }
                                    }
                                }

                                birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            }

                            int.TryParse(offeringQty, out count);

                            BPOID = objLightDAC.addBPO_jb(aid, name, mobile, gender, BPOType, BPOString, oversea, birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, count, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (BPOID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_BPO_jb(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_BPO_jb(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateBPO_jb_Info(aid, Year, ref BPOlist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < BPOlist.Length; i++)
                            {
                                msg += BPOlist[i];
                                if (i < BPOlist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_BPO_jb(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //玉敕大樹朝天宮-靈寶禮斗
        protected int addapplicantID_ma_Lingbaolidou(string appName, string appMobile, string appEmail, string total, string appCity, string appRegion, string appAddr, 
            string appZipCode, string sendback, string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Lingbaolidoulist, 
            ref int LingbaolidouID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 23;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Lingbaolidou_ma_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Lingbaolidou_ma(appName, appMobile, appEmail, total, appZipCode, appCity, appRegion, appAddr, sendback, reName, reMobile, 2, 
                adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string LingbaolidouString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string LingbaolidouType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填

                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            int.TryParse(offeringQty, out count);

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);

                                //b = year + "-" + smonth + "-" + sday;
                                //if (DateTime.TryParse(b, out solorBirth))
                                //{
                                //    //age = GetAge(DateTime.Parse(b), dtNow);

                                //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                //}
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }

                            LingbaolidouID = objLightDAC.addLingbaolidou_ma(aid, name, mobile, gender, LingbaolidouType, LingbaolidouString, oversea, Birth, leapMonth, birthTime, 
                                birthMonth, age, Zodiac, sBirth, count, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (LingbaolidouID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Lingbaolidou_ma(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, 
                        Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Lingbaolidou_ma(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateLingbaolidou_ma_Info(aid, Year, ref Lingbaolidoulist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < Lingbaolidoulist.Length; i++)
                            {
                                msg += Lingbaolidoulist[i];
                                if (i < Lingbaolidoulist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Lingbaolidou_ma(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //大甲鎮瀾宮-七朝清醮
        protected int addapplicantID_da_TaoistJiaoCeremony(string appName, string appMobile, string appEmail, string total, string appCity, string appRegion, string appAddr,
            string appZipCode, string sendback, string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] TaoistJiaoCeremonylist, 
            ref int TaoistJiaoCeremonyID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 3;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "TaoistJiaoCeremony_da_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_TaoistJiaoCeremony_da(appName, appMobile, "", "N", "吉", "0", "0", "", appEmail, total, appZipCode, appCity, appRegion, appAddr, 
                sendback, reName, reMobile, 2, adminID.ToString(), postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string TaoistJiaoCeremonyString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string TaoistJiaoCeremonyType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填

                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            int.TryParse(offeringQty, out count);

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);

                                //b = year + "-" + smonth + "-" + sday;
                                //if (DateTime.TryParse(b, out solorBirth))
                                //{
                                //    //age = GetAge(DateTime.Parse(b), dtNow);

                                //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                //}
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }

                            TaoistJiaoCeremonyID = objLightDAC.addTaoistJiaoCeremony_da(aid, name, name2, "", "", "", "", mobile, gender, TaoistJiaoCeremonyType,
                                TaoistJiaoCeremonyString, oversea, Birth, leapMonth, birthTime, birthMonth, age, Zodiac, sBirth, count, addr, city, region, zipCode, sendback,
                                reName, reMobile, appAddr, appCity, appRegion, appZipCode, Year);
                        }
                    }
                }

                if (TaoistJiaoCeremonyID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_TaoistJiaoCeremony_da(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", "", 
                        Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_TaoistJiaoCeremony_da(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateTaoistJiaoCeremony_da_Info(aid, Year, ref TaoistJiaoCeremonylist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < TaoistJiaoCeremonylist.Length; i++)
                            {
                                msg += TaoistJiaoCeremonylist[i];
                                if (i < TaoistJiaoCeremonylist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_TaoistJiaoCeremony_da(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //補財庫-鹿港城隍廟
        protected int addapplicantID_Lk_Supplies(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 21;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_Lk_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_Lk(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(), 
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            //string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            ////string mobile = appMobile;
                            //string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            //string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            //string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            //string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            //string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            //string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            //string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            //string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            //string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            //string addr = item2["address"].ToString();                                                                                      //部分地址
                            //string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            //if (oversea == "1")
                            //{
                            //    city = item2["city"].ToString();
                            //    region = item2["region"].ToString();
                            //}
                            //else
                            //{
                            //    if (item2["city"] != null)
                            //    {
                            //        city = item2["city"].ToString();
                            //    }
                            //    if (item2["region"] != null)
                            //    {
                            //        region = item2["region"].ToString();
                            //    }
                            //}

                            //string Birth = string.Empty;
                            //string birthMonth = string.Empty;
                            //string age = string.Empty;
                            //string Zodiac = string.Empty;

                            //string year = string.Empty;
                            //string month = string.Empty;
                            //string day = string.Empty;

                            //string birth = lunarBirthday;
                            //if (birth.Length == 7)
                            //{
                            //    string lyear = birth.Substring(0, 3);
                            //    year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                            //    month = birthMonth = birth.Substring(3, 2);
                            //    day = birth.Substring(5, 2);

                            //    Birth = year + "-" + month + "-" + day;
                            //    LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                            //    DateTime lBirth;
                            //    DateTime sBirth;
                            //    if (DateTime.TryParse(Birth, out lBirth))
                            //    {
                            //        //age = GetAge(DateTime.Parse(Birth), dtNow);

                            //        age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                            //    }
                            //    else
                            //    {
                            //        birth = birthday;
                            //        if (birth.Length == 7)
                            //        {
                            //            lyear = birth.Substring(0, 3);
                            //            year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                            //            month = birthMonth = birth.Substring(3, 2);
                            //            day = birth.Substring(5, 2);

                            //            Birth = year + "-" + month + "-" + day;
                            //            if (DateTime.TryParse(Birth, out sBirth))
                            //            {
                            //                //age = GetAge(DateTime.Parse(Birth), dtNow);

                            //                age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                            //            }
                            //        }
                            //    }

                            //    birth = "民國" + lyear + "年" + month + "月" + day + "日";
                            //}
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);

                                //b = year + "-" + smonth + "-" + sday;
                                //if (DateTime.TryParse(b, out solorBirth))
                                //{
                                //    //age = GetAge(DateTime.Parse(b), dtNow);

                                //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                //}
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }


                            SuppliesID = objLightDAC.addSupplies_Lk(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, Birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, sBirth, email, homeNum, 1, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_Lk(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_Lk(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_Lk_Info(aid, Year, ref Supplieslist);

                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            for (int i = 0; i < Supplieslist.Length; i++)
                            {
                                msg += Supplieslist[i];
                                if (i < Supplieslist.Length - 1)
                                {
                                    msg += ",";
                                }
                            }

                            msg += "。客服電話：04-36092299。";


                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies_Lk(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //補財庫-鹿港城隍廟
        protected int addapplicantID_Fw_Supplies(string appName, string appMobile, string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback,
            string reName, string reMobile, JArray itemsInfo, string Tid, string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 15;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies_Fw_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies_Fw(appName, appMobile, total, appCity, appRegion, appAddr, appZipCode, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                                                                                                                                                            //string mobile = appMobile;
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);

                                //b = year + "-" + smonth + "-" + sday;
                                //if (DateTime.TryParse(b, out solorBirth))
                                //{
                                //    //age = GetAge(DateTime.Parse(b), dtNow);

                                //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                //}
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }


                            SuppliesID = objLightDAC.addSupplies_Fw(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, Birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, sBirth, email, homeNum, 1, "", addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies_Fw(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies_Fw(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            //更新點燈資料表並取得訂單編號
                            objDatabaseHelper.UpdateSupplies_Fw_Info(aid, Year, ref msg, ref Supplieslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies_Fw(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }

        //天公生招財補運-桃園威天宮
        protected int addapplicantID_ty_Supplies3(string appName, string appMobile, string appBirth, string appLeapMonth, string appBirthTime, string appsBirth, string appEmail, 
            string total, string appCity, string appRegion, string appAddr, string appZipCode, string sendback, string reName, string reMobile, JArray itemsInfo, string Tid, 
            string fetOrderNumber, string Year, ref string[] Supplieslist, ref int SuppliesID, ref string OrderID)
        {
            int aid = 0;
            int adminID = 14;
            LightDAC objLightDAC = new LightDAC(this);
            string postURL = "Supplies3_ty_Index_FETAPI";
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);

            aid = objLightDAC.addapplicantinfo_Supplies3_ty(appName, appMobile, appBirth, appLeapMonth, appBirthTime, "", "0", "", appsBirth, appEmail, total, appZipCode, appCity, 
                appRegion, appAddr, sendback, reName, reMobile, 2, adminID.ToString(),
                postURL, Year);
            if (aid > 0)
            {
                int count = 0;
                int cost = 0;

                foreach (var item in itemsInfo)
                {
                    //int.TryParse(item["qty"].ToString(), out count);                                                                                        //數量/普品數量
                    count = 1;
                    int.TryParse(item["unitPrice"].ToString(), out cost);
                    string productCode = item["productCode"].ToString();

                    DataTable dtTempleCodeInfo = objLightDAC.GetTempleCodeInfo(productCode);
                    if (dtTempleCodeInfo.Rows.Count > 0)
                    {
                        string SuppliesString = dtTempleCodeInfo.Rows[0]["TypeString"].ToString();
                        string SuppliesType = dtTempleCodeInfo.Rows[0]["TypeID"].ToString();

                        JArray prayedPerson = (JArray)item["prayedPerson"];
                        foreach (var item2 in prayedPerson)
                        {
                            string name = item2["name"].ToString();                                                                                         //被祈福者姓名 / 飼主姓名
                            string mobile = item2["msisdn"] != null ? item2["msisdn"].ToString() : appMobile;                                               //祈福者電話                                                                                     //祈福者電話
                            string gender = item2["gender"] != null ? (item2["gender"].ToString() == "F" ? "信女" : "善男") : "善男";                       //性別 M: 男 F: 女
                            string birthday = item2["birthday"] != null ? item2["birthday"].ToString() : "";                                                //國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string lunarBirthday = item2["lunarBirthday"] != null ? item2["lunarBirthday"].ToString() : "";                                 //農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string leapMonth = item2["leapMonth"] != null ? item2["leapMonth"].ToString() : "N";                                            //是否為閏月 Y: 是 N: 否
                            string birthTime = item2["lunarBirthTime"] != null ? item2["lunarBirthTime"].ToString() : "吉";                                 //農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string oversea = item2["oversea"] != null ? item2["oversea"].ToString() : "1";                                                  //1: 國內 2: 國外
                            string city = string.Empty;                                                                                                     //縣/市, 國內地址必填
                            string region = string.Empty;                                                                                                   //地區, 國內地址必填
                            string addr = item2["address"].ToString();                                                                                      //部分地址
                            string zipCode = item2["zipCode"] != null ? item2["zipCode"].ToString() : "0";                                                  //郵遞區號, 國內地址必填
                            if (oversea == "1")
                            {
                                city = item2["city"].ToString();
                                region = item2["region"].ToString();
                            }
                            else
                            {
                                if (item2["city"] != null)
                                {
                                    city = item2["city"].ToString();
                                }
                                if (item2["region"] != null)
                                {
                                    region = item2["region"].ToString();
                                }
                            }

                            string name2 = item2["additionalName"] != null ? item2["additionalName"].ToString() : "";                                       //附加祈福人姓名（祈福者 2）
                            string homeNum = item2["phone"] != null ? item2["phone"].ToString() : "";                                                       //市話
                            string email = item2["email"] != null ? item2["email"].ToString() : "";                                                         //Email
                            string companyName = item2["companyName"] != null ? item2["companyName"].ToString() : "";                                       //公司行號名稱
                            string dName = item2["deceasedName"] != null ? item2["deceasedName"].ToString() : "";                                           //祖先姓氏/亡者姓名 (超拔法會類型時必填)
                            string dBirthType = item2["deceasedBirthRocEra"] != null ? item2["deceasedBirthRocEra"].ToString() : "";                        //祖先/亡者民國生日紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dBirthday = item2["deceasedBirthday"] != null ? item2["deceasedBirthday"].ToString() : "";                               //祖先/亡者國曆生日 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarBirthday = item2["deceasedLunarBirthday"] != null ? item2["deceasedLunarBirthday"].ToString() : "";                //祖先/亡者農曆生日 YYYMMDD (民國年/農曆月/農曆日)
                            string dLeapMonth = item2["deceasedBirthdayLeapMonth"] != null ? item2["deceasedBirthdayLeapMonth"].ToString() : "N";           //祖先/亡者農曆生日是否為閏月 Y: 是 N: 否
                            string dBirthTime = item2["deceasedLunarBirthTime"] != null ? item2["deceasedLunarBirthTime"].ToString() : "吉";                //祖先/亡者農曆時辰 子、丑、寅…亥 未確認時辰用戶可選吉時
                            string dDoDType = item2["deceasedDoDRocEra"] != null ? item2["deceasedDoDRocEra"].ToString() : "";                               //祖先/亡者死亡日期紀元 0：民國前 1：民國  001MMDD 1912 為民國 1 年 或 1910 為民國前 1 年
                            string dDoD = item2["deceasedDoD"] != null ? item2["deceasedDoD"].ToString() : "";                                              //祖先/亡者死亡日期 YYYMMDD (民國年/國曆月/國曆日)
                            string dLunarDoD = item2["deceasedLunarDoD"] != null ? item2["deceasedLunarDoD"].ToString() : "";                               //祖先/亡者死亡農曆日期 YYYMMDD (民國年/農曆月/農曆日)
                            string dDoDLeapMonth = item2["deceasedDoDLeepMonth"] != null ? item2["deceasedDoDLeepMonth"].ToString() : "N";                  //祖先/亡者死亡農曆日期是否為閏月 Y: 是 N: 否
                            string dZipCode = item2["deceasedZipCode"] != null ? item2["deceasedZipCode"].ToString() : "0";                                 //祖先/亡者/牌位 郵遞區號
                            string dCity = item2["deceasedCity"] != null ? item2["deceasedCity"].ToString() : "";                                           //祖先/亡者/牌位 縣/市
                            string dRegion = item2["deceasedRegion"] != null ? item2["deceasedRegion"].ToString() : "";                                     //祖先/亡者/牌位 地區
                            string dAddr = item2["deceasedAddress"] != null ? item2["deceasedAddress"].ToString() : "";                                     //祖先/亡者/牌位 部分地址

                            string additionalOffering = item2["additionalOffering"] != null ? item2["additionalOffering"].ToString() : "N";                 //加購普品 Y: 是 N: 否
                            string offeringQty = item2["offeringQty"] != null ? item2["offeringQty"].ToString() : "0";                                      //加購普品數量
                            string additionalOfferingCost = item2["additionalOfferingPrice"] != null ? item2["additionalOfferingPrice"].ToString() : "0";   //加購普品單價
                            string jossMoneyQty = item2["jossMoneyQty"] != null ? item2["jossMoneyQty"].ToString() : "0";                                   //加購金紙數量
                            string jossMoneyPrice = item2["jossMoneyPrice"] != null ? item2["jossMoneyPrice"].ToString() : "0";                             //加購金紙單價

                            string remark = item2["remark"] != null ? item2["remark"].ToString() : "";                                                      //備註

                            string Birth = string.Empty;
                            string birthMonth = string.Empty;
                            string age = string.Empty;
                            string Zodiac = string.Empty;
                            string lyear = string.Empty;
                            string year = string.Empty;
                            string month = string.Empty;
                            string day = string.Empty;

                            string sBirth = string.Empty;
                            string syear = string.Empty;
                            string smonth = string.Empty;
                            string sday = string.Empty;

                            string birth = lunarBirthday;
                            if (birth.Length == 7)
                            {
                                lyear = birth.Substring(0, 3);
                                year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                month = birthMonth = birth.Substring(3, 2);
                                day = birth.Substring(5, 2);

                                string b = year + "-" + month + "-" + day;
                                LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                DateTime lunarBirth;
                                DateTime solorBirth;
                                if (DateTime.TryParse(b, out lunarBirth))
                                {
                                    //age = GetAge(DateTime.Parse(b), dtNow);

                                    age = GetAge(int.Parse(year), int.Parse(month), int.Parse(day)).ToString();
                                }
                                else
                                {
                                    birth = birthday;
                                    if (birth.Length == 7)
                                    {
                                        syear = birth.Substring(0, 3);
                                        year = (int.Parse(birth.Substring(0, 3)) + 1911).ToString();
                                        smonth = birthMonth = birth.Substring(3, 2);
                                        sday = birth.Substring(5, 2);

                                        b = year + "-" + smonth + "-" + sday;
                                        LunarSolarConverter.shuxiang(int.Parse(year), ref Zodiac);
                                        if (DateTime.TryParse(b, out solorBirth))
                                        {
                                            //age = GetAge(DateTime.Parse(b), dtNow);

                                            age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                        }
                                    }
                                }
                            }

                            string sbirth = birthday;
                            if (sbirth.Length == 7)
                            {
                                syear = sbirth.Substring(0, 3);
                                year = (int.Parse(sbirth.Substring(0, 3)) + 1911).ToString();
                                smonth = sbirth.Substring(3, 2);
                                sday = sbirth.Substring(5, 2);

                                //b = year + "-" + smonth + "-" + sday;
                                //if (DateTime.TryParse(b, out solorBirth))
                                //{
                                //    //age = GetAge(DateTime.Parse(b), dtNow);

                                //    age = GetAge(int.Parse(year), int.Parse(smonth), int.Parse(sday)).ToString();
                                //}
                            }

                            int l = 0, s = 0;
                            int.TryParse(lyear, out l);
                            int.TryParse(syear, out s);

                            if (lyear != "" && month != "" && day != "")
                            {
                                Birth = "民國" + (l > 0 ? l.ToString() : lyear) + "年" + month + "月" + day + "日";
                            }
                            if (syear != "" && smonth != "" && sday != "")
                            {
                                sBirth = "民國" + (s > 0 ? s.ToString() : syear) + "年" + smonth + "月" + sday + "日";
                            }


                            SuppliesID = objLightDAC.addSupplies3_ty(aid, name, mobile, gender, SuppliesType, SuppliesString, oversea, Birth, leapMonth, birthTime, birthMonth,
                                age, Zodiac, sBirth, 1, remark, addr, city, region, zipCode, Year);
                        }
                    }
                }

                if (SuppliesID > 0)
                {
                    BCFBaseLibrary.Web.BasePage basePage = new BCFBaseLibrary.Web.BasePage();
                    DatabaseHelper objDatabaseHelper = new DatabaseHelper(basePage);
                    OrderID = dtNow.ToString("yyyyMMddHHmmssfff");
                    string CallbackLog = Tid + "," + fetOrderNumber;

                    long id = objDatabaseHelper.AddChargeLog_Supplies3_ty(OrderID, aid, int.Parse(total), "FETAPI", 0, itemsInfo.ToString(), "", fetOrderNumber, Request.UserHostAddress, Year);

                    DataTable dtCharge = objDatabaseHelper.GetChargeLog_Supplies3_ty(OrderID, Year);
                    if (dtCharge.Rows.Count > 0)
                    {
                        if ((int)dtCharge.Rows[0]["Status"] == 0)
                        {
                            //更新點燈資料表並取得訂單編號
                            string msg = "感謝購買,已成功付款" + cost + "元,您的訂單編號 ";

                            objDatabaseHelper.UpdateSupplies3_ty_Info(aid, Year, ref msg, ref Supplieslist);

                            //msg = "感謝大德參與線上點燈,茲收您1960元功德金,訂單編號 光明燈:T2204, 安太歲:25351, 文昌燈:六1214。";
                            //mobile = "0903002568";

                            SMSHepler objSMSHepler = new SMSHepler();
                            string ChargeType = string.Empty;
                            //更新流水付費表資訊(付費成功)
                            if (objDatabaseHelper.UpdateChargeLog_Supplies3_ty(OrderID, Tid, msg, Request.UserHostAddress, CallbackLog, Year, ref ChargeType))
                            {
                                //if (objSMSHepler.SendMsg_SL(mobile, msg))
                                //{

                                //    //m2 = m2.IndexOf("aid=") > 0 ? m2 : (m2.IndexOf("?") > 0 ? m2 + "&aid=" + m1 : m2 + "?aid=" + m1 + "&a=" + adminID);
                                //    m2 = "https://bobibobi.tw/Temples/templeComplete.aspx?kind=1&a=" + adminID + "&aid=" + aid;
                                //    Response.Redirect(m2, true);
                                //}
                                //else
                                //{
                                //    Response.Write("<script>alert('傳送簡訊失敗。請聯繫管理員。客服電話：04-36092299。');window.location.href='" + rebackURL + "'</script>");
                                //}
                            }
                            else
                            {
                                string encrypt = string.Empty;

                                //JSON寫入到檔案
                                using (StringWriter sw = new StringWriter())
                                {
                                    using (JsonTextWriter writer = new JsonTextWriter(sw))
                                    {
                                        //建立物件
                                        writer.WriteStartObject();

                                        //物件名稱
                                        writer.WritePropertyName("detail");

                                        using (StringWriter sw2 = new StringWriter())
                                        {
                                            using (JsonTextWriter writer2 = new JsonTextWriter(sw2))
                                            {
                                                //建立物件
                                                writer2.WriteStartObject();

                                                writer2.WritePropertyName("orderMsg");
                                                writer2.WriteValue("fail");

                                                writer2.WritePropertyName("orderStatus");
                                                writer2.WriteValue("1003");

                                                writer2.WriteEndObject();

                                                encrypt = AESHelper.AesEncrypt(sw2.ToString(), checkedkey);
                                            }
                                        }

                                        writer.WriteValue(encrypt);

                                        writer.WritePropertyName("resultCode"); writer.WriteValue("9999");

                                        writer.WriteEndObject();

                                        writer.Flush();
                                        writer.Close();
                                        sw.Flush();
                                        sw.Close();

                                        //輸出結果
                                        Response.Write(sw.ToString());

                                        SaveRequestLog(Request.Url + sw.ToString());
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return aid;
        }



        protected void DeleteLightsInfo(int AdminID, int type, int ApplicantID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), "1", type, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeleteLightsinfo(ApplicantID, AdminID.ToString(), type, dtNow.Year.ToString()))
                {
                }
            }
        }

        protected void DeletePurdueInfo(int AdminID, int ApplicantID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), "2", 1, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeletePurdueinfo(ApplicantID, AdminID.ToString(), dtNow.Year.ToString()))
                {
                }
            }
        }

        protected void DeleteProductInfo(int AdminID, int ApplicantID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), "3", 1, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeleteProductNum(ApplicantID, AdminID.ToString(), "-1", dtNow.Year.ToString()))
                {
                }
            }
        }

        protected void DeleteSuppliesInfo(int AdminID, int ApplicantID, int SuppliesType)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), SuppliesType.ToString(), 1, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeleteSuppliesNum(ApplicantID, AdminID.ToString(), SuppliesType, dtNow.Year.ToString()))
                {
                }
            }
        }

        protected void DeleteBPOInfo(int AdminID, int ApplicantID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), "10", 1, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeleteBPONum(ApplicantID, AdminID.ToString(), dtNow.Year.ToString()))
                {
                }
            }
        }

        protected void DeleteLingbaolidouInfo(int AdminID, int ApplicantID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), "12", 1, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeleteLingbaolidouNum(ApplicantID, AdminID.ToString(), dtNow.Year.ToString()))
                {
                }
            }
        }

        protected void DeleteTaoistJiaoCeremonyInfo(int AdminID, int ApplicantID)
        {
            TimeZoneInfo info = TimeZoneInfo.FindSystemTimeZoneById("Taipei Standard Time");
            DateTime dtNow = TimeZoneInfo.ConvertTime(DateTime.Now, info);
            AdminDAC objAdminDAC = new AdminDAC(this);

            if (objAdminDAC.Updatestatus2applicantinfo(ApplicantID, -1, AdminID.ToString(), "12", 1, dtNow.Year.ToString()))
            {
                if (objAdminDAC.DeleteTaoistJiaoCeremonyNum(ApplicantID, AdminID.ToString(), dtNow.Year.ToString()))
                {
                }
            }
        }

    }
}